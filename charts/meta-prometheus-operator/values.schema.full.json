{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "com.coreos.monitoring.pkg.apis.monitoring.v1.APIServerConfig": {
      "additionalProperties": false,
      "description": "APIServerConfig defines a host and auth methods to access apiserver. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#kubernetes_sd_config",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Authorization",
          "description": "Authorization section for accessing apiserver"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication"
        },
        "bearerToken": {
          "description": "Bearer token for accessing apiserver.",
          "type": "string"
        },
        "bearerTokenFile": {
          "description": "File to read bearer token for accessing apiserver.",
          "type": "string"
        },
        "host": {
          "default": "",
          "description": "Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "TLS Config to use for accessing apiserver."
        }
      },
      "required": [
        "host"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertingSpec": {
      "additionalProperties": false,
      "description": "AlertingSpec defines parameters for alerting configuration of Prometheus servers.",
      "properties": {
        "alertmanagers": {
          "description": "AlertmanagerEndpoints Prometheus should fire alerts against.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerEndpoints",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "alertmanagers"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerConfigMatcherStrategy": {
      "additionalProperties": false,
      "description": "AlertmanagerConfigMatcherStrategy defines the strategy used by AlertmanagerConfig objects to match alerts.",
      "properties": {
        "type": {
          "description": "If set to `OnNamespace`, the operator injects a label matcher matching the namespace of the AlertmanagerConfig object for all its routes and inhibition rules. `None` will not add any additional matchers other than the ones specified in the AlertmanagerConfig. Default is `OnNamespace`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerConfiguration": {
      "additionalProperties": false,
      "description": "AlertmanagerConfiguration defines the Alertmanager configuration.",
      "properties": {
        "global": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerGlobalConfig",
          "description": "Defines the global parameters of the Alertmanager configuration."
        },
        "name": {
          "description": "The name of the AlertmanagerConfig resource which is used to generate the Alertmanager configuration. It must be defined in the same namespace as the Alertmanager object. The operator will not enforce a `namespace` label for routes and inhibition rules.",
          "type": "string"
        },
        "templates": {
          "description": "Custom notification templates.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerEndpoints": {
      "additionalProperties": false,
      "description": "AlertmanagerEndpoints defines a selection of a single Endpoints object containing alertmanager IPs to fire alerts against.",
      "properties": {
        "apiVersion": {
          "description": "Version of the Alertmanager API that Prometheus uses to send alerts. It can be \"v1\" or \"v2\".",
          "type": "string"
        },
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization section for this alertmanager endpoint"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication"
        },
        "bearerTokenFile": {
          "description": "BearerTokenFile to read from filesystem to use when authenticating to Alertmanager.",
          "type": "string"
        },
        "enableHttp2": {
          "description": "Whether to enable HTTP2.",
          "type": "boolean"
        },
        "name": {
          "default": "",
          "description": "Name of Endpoints object in Namespace.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace of Endpoints object.",
          "type": "string"
        },
        "pathPrefix": {
          "description": "Prefix for the HTTP path alerts are pushed to.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": {},
          "description": "Port the Alertmanager API is exposed on."
        },
        "scheme": {
          "description": "Scheme to use when firing alerts.",
          "type": "string"
        },
        "timeout": {
          "description": "Timeout is a per-target Alertmanager timeout when pushing alerts.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "TLS Config to use for alertmanager connection."
        }
      },
      "required": [
        "namespace",
        "name",
        "port"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerGlobalConfig": {
      "additionalProperties": false,
      "description": "AlertmanagerGlobalConfig configures parameters that are valid in all other configuration contexts. See https://prometheus.io/docs/alerting/latest/configuration/#configuration-file",
      "properties": {
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "resolveTimeout": {
          "description": "ResolveTimeout is the default value used by alertmanager if the alert does not include EndsAt, after this time passes it can declare the alert as resolved if it has not been updated. This has no impact on alerts from Prometheus, as they always include EndsAt.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerSpec": {
      "additionalProperties": false,
      "description": "AlertmanagerSpec is a specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "properties": {
        "additionalPeers": {
          "description": "AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints."
        },
        "alertmanagerConfigMatcherStrategy": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerConfigMatcherStrategy",
          "default": {},
          "description": "The AlertmanagerConfigMatcherStrategy defines how AlertmanagerConfig objects match the alerts. In the future more options may be added."
        },
        "alertmanagerConfigNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Namespaces to be selected for AlertmanagerConfig discovery. If nil, only check own namespace."
        },
        "alertmanagerConfigSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "AlertmanagerConfigs to be selected for to merge and configure Alertmanager with."
        },
        "alertmanagerConfiguration": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerConfiguration",
          "description": "EXPERIMENTAL: alertmanagerConfiguration specifies the configuration of Alertmanager. If defined, it takes precedence over the `configSecret` field. This field may change in future releases."
        },
        "baseImage": {
          "description": "Base image that is used to deploy pods, without tag. Deprecated: use 'image' instead",
          "type": "string"
        },
        "clusterAdvertiseAddress": {
          "description": "ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918",
          "type": "string"
        },
        "clusterGossipInterval": {
          "description": "Interval between gossip attempts.",
          "type": "string"
        },
        "clusterPeerTimeout": {
          "description": "Timeout for cluster peering.",
          "type": "string"
        },
        "clusterPushpullInterval": {
          "description": "Interval between pushpull attempts.",
          "type": "string"
        },
        "configMaps": {
          "description": "ConfigMaps is a list of ConfigMaps in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-\u003cconfigmap-name\u003e`. The ConfigMaps are mounted into `/etc/alertmanager/configmaps/\u003cconfigmap-name\u003e` in the 'alertmanager' container.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "configSecret": {
          "description": "ConfigSecret is the name of a Kubernetes Secret in the same namespace as the Alertmanager object, which contains the configuration for this Alertmanager instance. If empty, it defaults to `alertmanager-\u003calertmanager-name\u003e`.\n\nThe Alertmanager configuration should be available under the `alertmanager.yaml` key. Additional keys from the original secret are copied to the generated secret and mounted into the `/etc/alertmanager/config` directory in the `alertmanager` container.\n\nIf either the secret or the `alertmanager.yaml` key is missing, the operator provisions a minimal Alertmanager configuration with one empty receiver (effectively dropping alert notifications).",
          "type": "string"
        },
        "containers": {
          "description": "Containers allows injecting additional containers. This is meant to allow adding an authentication proxy to an Alertmanager pod. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `alertmanager` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "externalUrl": {
          "description": "The external URL the Alertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if Alertmanager is not served from root of a DNS name.",
          "type": "string"
        },
        "forceEnableClusterMode": {
          "description": "ForceEnableClusterMode ensures Alertmanager does not deactivate the cluster mode when running with a single replica. Use case is e.g. spanning an Alertmanager cluster across Kubernetes clusters with a single replica in each.",
          "type": "boolean"
        },
        "hostAliases": {
          "description": "Pods' hostAliases configuration",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.HostAlias",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map"
        },
        "image": {
          "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Alertmanager is being configured.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy for the 'alertmanager', 'init-config-reloader' and 'config-reloader' containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "initContainers": {
          "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Alertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "listenLocal": {
          "description": "ListenLocal makes the Alertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the Alertmanager UI, not the gossip communication.",
          "type": "boolean"
        },
        "logFormat": {
          "description": "Log format for Alertmanager to be configured with.",
          "type": "string"
        },
        "logLevel": {
          "description": "Log level for Alertmanager to be configured with.",
          "type": "string"
        },
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.",
          "format": "int64",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Define which Nodes the Pods are scheduled on.",
          "type": "object"
        },
        "paused": {
          "description": "If set to true all actions on the underlying managed objects are not goint to be performed, except for delete actions.",
          "type": "boolean"
        },
        "podMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedObjectMetadata",
          "description": "PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods."
        },
        "portName": {
          "description": "Port name used for the pods and governing service. This defaults to web",
          "type": "string"
        },
        "priorityClassName": {
          "description": "Priority class assigned to the Pods",
          "type": "string"
        },
        "replicas": {
          "description": "Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
          "format": "int32",
          "type": "integer"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "default": {},
          "description": "Define resources requests and limits for single Pods."
        },
        "retention": {
          "description": "Time duration Alertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).",
          "type": "string"
        },
        "routePrefix": {
          "description": "The route prefix Alertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.",
          "type": "string"
        },
        "secrets": {
          "description": "Secrets is a list of Secrets in the same namespace as the Alertmanager object, which shall be mounted into the Alertmanager Pods. Each Secret is added to the StatefulSet definition as a volume named `secret-\u003csecret-name\u003e`. The Secrets are mounted into `/etc/alertmanager/secrets/\u003csecret-name\u003e` in the 'alertmanager' container.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext."
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.",
          "type": "string"
        },
        "sha": {
          "description": "SHA of Alertmanager container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
          "type": "string"
        },
        "storage": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.StorageSpec",
          "description": "Storage is the definition of how storage will be used by the Alertmanager instances."
        },
        "tag": {
          "description": "Tag of Alertmanager container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
          "type": "string"
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration",
            "default": {}
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "If specified, the pod's topology spread constraints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint",
            "default": {}
          },
          "type": "array"
        },
        "version": {
          "description": "Version the cluster should be on.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount",
            "default": {}
          },
          "type": "array"
        },
        "volumes": {
          "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume",
            "default": {}
          },
          "type": "array"
        },
        "web": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerWebSpec",
          "description": "Defines the web command line flags when starting Alertmanager."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerWebSpec": {
      "additionalProperties": false,
      "description": "AlertmanagerWebSpec defines the web command line flags when starting Alertmanager.",
      "properties": {
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.WebHTTPConfig",
          "description": "Defines HTTP parameters for web server."
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.WebTLSConfig",
          "description": "Defines the TLS parameters for HTTPS."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ArbitraryFSAccessThroughSMsConfig": {
      "additionalProperties": false,
      "description": "ArbitraryFSAccessThroughSMsConfig enables users to configure, whether a service monitor selected by the Prometheus instance is allowed to use arbitrary files on the file system of the Prometheus container. This is the case when e.g. a service monitor specifies a BearerTokenFile in an endpoint. A malicious user could create a service monitor selecting arbitrary secret files in the Prometheus container. Those secrets would then be sent with a scrape request by Prometheus to a malicious target. Denying the above would prevent the attack, users can instead use the BearerTokenSecret field.",
      "properties": {
        "deny": {
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Argument": {
      "additionalProperties": false,
      "description": "Argument as part of the AdditionalArgs list.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name of the argument, e.g. \"scrape.discovery-reload-interval\".",
          "type": "string"
        },
        "value": {
          "description": "Argument value, e.g. 30s. Can be empty for name-only arguments (e.g. --storage.tsdb.no-lockfile)",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.AttachMetadata": {
      "additionalProperties": false,
      "properties": {
        "node": {
          "description": "When set to true, Prometheus must have permissions to get Nodes.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Authorization": {
      "additionalProperties": false,
      "description": "Authorization contains optional `Authorization` header configuration. This section is only understood by versions of Prometheus \u003e= 2.26.0.",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "The secret's key that contains the credentials of the request"
        },
        "credentialsFile": {
          "description": "File to read a secret from, mutually exclusive with Credentials (from SafeAuthorization)",
          "type": "string"
        },
        "type": {
          "description": "Set the authentication type. Defaults to Bearer, Basic will cause an error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth": {
      "additionalProperties": false,
      "description": "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
      "properties": {
        "password": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret in the service monitor namespace that contains the password for authentication."
        },
        "username": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret in the service monitor namespace that contains the username for authentication."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedObjectMetadata": {
      "additionalProperties": false,
      "description": "EmbeddedObjectMetadata contains a subset of the fields included in k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta Only fields which are relevant to embedded resources are included.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedPersistentVolumeClaim": {
      "additionalProperties": false,
      "description": "EmbeddedPersistentVolumeClaim is an embedded version of k8s.io/api/core/v1.PersistentVolumeClaim. It contains TypeMeta and a reduced ObjectMeta.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedObjectMetadata",
          "default": {},
          "description": "EmbeddedMetadata contains metadata relevant to an EmbeddedResource."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "default": {},
          "description": "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus",
          "default": {},
          "description": "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Endpoint": {
      "additionalProperties": false,
      "description": "Endpoint defines a scrapeable endpoint serving Prometheus metrics.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization section for this endpoint"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints"
        },
        "bearerTokenFile": {
          "description": "File to read bearer token for scraping targets.",
          "type": "string"
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service monitor and accessible by the Prometheus Operator."
        },
        "enableHttp2": {
          "description": "Whether to enable HTTP2.",
          "type": "boolean"
        },
        "filterRunning": {
          "description": "Drop pods that are not running. (Failed, Succeeded). Enabled by default. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase",
          "type": "boolean"
        },
        "followRedirects": {
          "description": "FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "honorLabels": {
          "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
          "type": "boolean"
        },
        "honorTimestamps": {
          "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
          "type": "boolean"
        },
        "interval": {
          "description": "Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
          "type": "string"
        },
        "metricRelabelings": {
          "description": "MetricRelabelConfigs to apply to samples before ingestion.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "params": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "Optional HTTP URL parameters",
          "type": "object"
        },
        "path": {
          "description": "HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).",
          "type": "string"
        },
        "port": {
          "description": "Name of the service port this endpoint refers to. Mutually exclusive with targetPort.",
          "type": "string"
        },
        "proxyUrl": {
          "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
          "type": "string"
        },
        "relabelings": {
          "description": "RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "scheme": {
          "description": "HTTP scheme to use for scraping.",
          "type": "string"
        },
        "scrapeTimeout": {
          "description": "Timeout after which the scrape is ended If not specified, the Prometheus global scrape timeout is used unless it is less than `Interval` in which the latter is used.",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the target port of the Pod behind the Service, the port must be specified with container port property. Mutually exclusive with port."
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "TLS configuration to use when scraping the endpoint"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Exemplars": {
      "additionalProperties": false,
      "properties": {
        "maxSize": {
          "description": "Maximum number of exemplars stored in memory for all series. If not set, Prometheus uses its default value. A value of zero or less than zero disables the storage.",
          "format": "int64",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.HTTPConfig": {
      "additionalProperties": false,
      "description": "HTTPConfig defines a client HTTP configuration. See https://prometheus.io/docs/alerting/latest/configuration/#http_config",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence."
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the Alertmanager object and accessible by the Prometheus Operator."
        },
        "followRedirects": {
          "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 client credentials used to fetch a token for the targets."
        },
        "proxyURL": {
          "description": "Optional proxy URL.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig",
          "description": "TLS configuration for the client."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.HostAlias": {
      "additionalProperties": false,
      "description": "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the above IP address.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "default": "",
          "description": "IP address of the host file entry.",
          "type": "string"
        }
      },
      "required": [
        "ip",
        "hostnames"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.MetadataConfig": {
      "additionalProperties": false,
      "description": "MetadataConfig configures the sending of series metadata to the remote storage.",
      "properties": {
        "send": {
          "description": "Whether metric metadata is sent to the remote storage or not.",
          "type": "boolean"
        },
        "sendInterval": {
          "description": "How frequently metric metadata is sent to the remote storage.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector": {
      "additionalProperties": false,
      "description": "NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces. If `any` is true, it takes precedence over `matchNames`. If `matchNames` is empty and `any` is false, it means that the objects are selected from the current namespace.",
      "properties": {
        "any": {
          "description": "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
          "type": "boolean"
        },
        "matchNames": {
          "description": "List of namespace names to select from.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2": {
      "additionalProperties": false,
      "description": "OAuth2 allows an endpoint to authenticate with OAuth2. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#oauth2",
      "properties": {
        "clientId": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "The secret or configmap containing the OAuth2 client id"
        },
        "clientSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "The secret containing the OAuth2 client secret"
        },
        "endpointParams": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Parameters to append to the token URL",
          "type": "object"
        },
        "scopes": {
          "description": "OAuth2 scopes used for the token request",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "tokenUrl": {
          "default": "",
          "description": "The URL to fetch the token from",
          "type": "string"
        }
      },
      "required": [
        "clientId",
        "clientSecret",
        "tokenUrl"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ObjectReference": {
      "additionalProperties": false,
      "description": "ObjectReference references a PodMonitor, ServiceMonitor, Probe or PrometheusRule object.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group of the referent. When not specified, it defaults to `monitoring.coreos.com`",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. When not set, all resources are matched.",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resource": {
          "default": "",
          "description": "Resource of the referent.",
          "type": "string"
        }
      },
      "required": [
        "resource",
        "namespace"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpoint": {
      "additionalProperties": false,
      "description": "PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization section for this endpoint"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint"
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the pod monitor and accessible by the Prometheus Operator."
        },
        "enableHttp2": {
          "description": "Whether to enable HTTP2.",
          "type": "boolean"
        },
        "filterRunning": {
          "description": "Drop pods that are not running. (Failed, Succeeded). Enabled by default. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#pod-phase",
          "type": "boolean"
        },
        "followRedirects": {
          "description": "FollowRedirects configures whether scrape requests follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "honorLabels": {
          "description": "HonorLabels chooses the metric's labels on collisions with target labels.",
          "type": "boolean"
        },
        "honorTimestamps": {
          "description": "HonorTimestamps controls whether Prometheus respects the timestamps present in scraped data.",
          "type": "boolean"
        },
        "interval": {
          "description": "Interval at which metrics should be scraped If not specified Prometheus' global scrape interval is used.",
          "type": "string"
        },
        "metricRelabelings": {
          "description": "MetricRelabelConfigs to apply to samples before ingestion.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "params": {
          "additionalProperties": {
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "description": "Optional HTTP URL parameters",
          "type": "object"
        },
        "path": {
          "description": "HTTP path to scrape for metrics. If empty, Prometheus uses the default value (e.g. `/metrics`).",
          "type": "string"
        },
        "port": {
          "description": "Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.",
          "type": "string"
        },
        "proxyUrl": {
          "description": "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
          "type": "string"
        },
        "relabelings": {
          "description": "RelabelConfigs to apply to samples before scraping. Prometheus Operator automatically adds relabelings for a few standard Kubernetes fields. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "scheme": {
          "description": "HTTP scheme to use for scraping.",
          "type": "string"
        },
        "scrapeTimeout": {
          "description": "Timeout after which the scrape is ended If not specified, the Prometheus global scrape interval is used.",
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Deprecated: Use 'port' instead."
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpointTLSConfig",
          "description": "TLS configuration to use when scraping the endpoint."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpointTLSConfig": {
      "additionalProperties": false,
      "description": "PodMetricsEndpointTLSConfig specifies TLS configuration parameters.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Certificate authority used when verifying server certificates."
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Client certificate to present when doing client-authentication."
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitorSpec": {
      "additionalProperties": false,
      "description": "PodMonitorSpec contains specification parameters for a PodMonitor.",
      "properties": {
        "attachMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AttachMetadata",
          "description": "Attaches node metadata to discovered targets. Requires Prometheus v2.35.0 and above."
        },
        "jobLabel": {
          "description": "The label to use to retrieve the job name from.",
          "type": "string"
        },
        "labelLimit": {
          "description": "Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelNameLengthLimit": {
          "description": "Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelValueLengthLimit": {
          "description": "Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector",
          "default": {},
          "description": "Selector to select which namespaces the Endpoints objects are discovered from."
        },
        "podMetricsEndpoints": {
          "description": "A list of endpoints allowed as part of this PodMonitor.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMetricsEndpoint",
            "default": {}
          },
          "type": "array"
        },
        "podTargetLabels": {
          "description": "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "sampleLimit": {
          "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
          "format": "int64",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "default": {},
          "description": "Selector to select Pod objects."
        },
        "targetLimit": {
          "description": "TargetLimit defines a limit on the number of scraped targets that will be accepted.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "podMetricsEndpoints",
        "selector"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeSpec": {
      "additionalProperties": false,
      "description": "ProbeSpec contains specification parameters for a Probe.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization section for this endpoint"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth allow an endpoint to authenticate over basic authentication. More info: https://prometheus.io/docs/operating/configuration/#endpoint"
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the probe and accessible by the Prometheus Operator."
        },
        "interval": {
          "description": "Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.",
          "type": "string"
        },
        "jobName": {
          "description": "The job name assigned to scraped metrics by default.",
          "type": "string"
        },
        "labelLimit": {
          "description": "Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelNameLengthLimit": {
          "description": "Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelValueLengthLimit": {
          "description": "Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "metricRelabelings": {
          "description": "MetricRelabelConfigs to apply to samples before ingestion.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "module": {
          "description": "The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml",
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "prober": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProberSpec",
          "default": {},
          "description": "Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty."
        },
        "sampleLimit": {
          "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
          "format": "int64",
          "type": "integer"
        },
        "scrapeTimeout": {
          "description": "Timeout for scraping metrics from the Prometheus exporter. If not specified, the Prometheus global scrape interval is used.",
          "type": "string"
        },
        "targetLimit": {
          "description": "TargetLimit defines a limit on the number of scraped targets that will be accepted.",
          "format": "int64",
          "type": "integer"
        },
        "targets": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargets",
          "default": {},
          "description": "Targets defines a set of static or dynamically discovered targets to probe."
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTLSConfig",
          "description": "TLS configuration to use when scraping the endpoint."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTLSConfig": {
      "additionalProperties": false,
      "description": "ProbeTLSConfig specifies TLS configuration parameters for the prober.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Certificate authority used when verifying server certificates."
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Client certificate to present when doing client-authentication."
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargetIngress": {
      "additionalProperties": false,
      "description": "ProbeTargetIngress defines the set of Ingress objects considered for probing. The operator configures a target for each host/path combination of each ingress object.",
      "properties": {
        "namespaceSelector": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector",
          "default": {},
          "description": "From which namespaces to select Ingress objects."
        },
        "relabelingConfigs": {
          "description": "RelabelConfigs to apply to the label set of the target before it gets scraped. The original ingress address is available via the `__tmp_prometheus_ingress_address` label. It can be used to customize the probed URL. The original scrape job's name is available via the `__tmp_prometheus_job_name` label. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "default": {},
          "description": "Selector to select the Ingress objects."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargetStaticConfig": {
      "additionalProperties": false,
      "description": "ProbeTargetStaticConfig defines the set of static targets considered for probing.",
      "properties": {
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Labels assigned to all metrics scraped from the targets.",
          "type": "object"
        },
        "relabelingConfigs": {
          "description": "RelabelConfigs to apply to the label set of the targets before it gets scraped. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig"
          },
          "type": "array"
        },
        "static": {
          "description": "The list of hosts to probe.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargets": {
      "additionalProperties": false,
      "description": "ProbeTargets defines how to discover the probed targets. One of the `staticConfig` or `ingress` must be defined. If both are defined, `staticConfig` takes precedence.",
      "properties": {
        "ingress": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargetIngress",
          "description": "ingress defines the Ingress objects to probe and the relabeling configuration. If `staticConfig` is also defined, `staticConfig` takes precedence."
        },
        "staticConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeTargetStaticConfig",
          "description": "staticConfig defines the static list of targets to probe and the relabeling configuration. If `ingress` is also defined, `staticConfig` takes precedence. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ProberSpec": {
      "additionalProperties": false,
      "description": "ProberSpec contains specification parameters for the Prober used for probing.",
      "properties": {
        "path": {
          "description": "Path to collect metrics from. Defaults to `/probe`.",
          "type": "string"
        },
        "proxyUrl": {
          "description": "Optional ProxyURL.",
          "type": "string"
        },
        "scheme": {
          "description": "HTTP scheme to use for scraping. Defaults to `http`.",
          "type": "string"
        },
        "url": {
          "default": "",
          "description": "Mandatory URL of the prober.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleExcludeConfig": {
      "additionalProperties": false,
      "description": "PrometheusRuleExcludeConfig enables users to configure excluded PrometheusRule names and their namespaces to be ignored while enforcing namespace label for alerts and metrics.",
      "properties": {
        "ruleName": {
          "default": "",
          "description": "RuleNamespace - name of excluded rule",
          "type": "string"
        },
        "ruleNamespace": {
          "default": "",
          "description": "RuleNamespace - namespace of excluded rule",
          "type": "string"
        }
      },
      "required": [
        "ruleNamespace",
        "ruleName"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleSpec": {
      "additionalProperties": false,
      "description": "PrometheusRuleSpec contains specification parameters for a Rule.",
      "properties": {
        "groups": {
          "description": "Content of Prometheus rule file",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RuleGroup",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusSpec": {
      "additionalProperties": false,
      "description": "PrometheusSpec is a specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "properties": {
        "additionalAlertManagerConfigs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AdditionalAlertManagerConfigs allows specifying a key of a Secret containing additional Prometheus AlertManager configurations. AlertManager configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alertmanager_config. As AlertManager configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible AlertManager configs are going to break Prometheus after the upgrade."
        },
        "additionalAlertRelabelConfigs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AdditionalAlertRelabelConfigs allows specifying a key of a Secret containing additional Prometheus alert relabel configurations. Alert relabel configurations specified are appended to the configurations generated by the Prometheus Operator. Alert relabel configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs. As alert relabel configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible alert relabel configs are going to break Prometheus after the upgrade."
        },
        "additionalArgs": {
          "description": "AdditionalArgs allows setting additional arguments for the Prometheus container. It is intended for e.g. activating hidden flags which are not supported by the dedicated configuration options yet. The arguments are passed as-is to the Prometheus container which may cause issues if they are invalid or not supported by the given Prometheus version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Argument",
            "default": {}
          },
          "type": "array"
        },
        "additionalScrapeConfigs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AdditionalScrapeConfigs allows specifying a key of a Secret containing additional Prometheus scrape configurations. Scrape configurations specified are appended to the configurations generated by the Prometheus Operator. Job configurations specified must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config. As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of Prometheus. It is advised to review Prometheus release notes to ensure that no incompatible scrape configs are going to break Prometheus after the upgrade."
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints."
        },
        "alerting": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertingSpec",
          "description": "Define details regarding alerting."
        },
        "allowOverlappingBlocks": {
          "description": "AllowOverlappingBlocks enables vertical compaction and vertical query merge in Prometheus. This is still experimental in Prometheus so it may change in any upcoming release.",
          "type": "boolean"
        },
        "apiserverConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.APIServerConfig",
          "description": "APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, Prometheus is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/."
        },
        "arbitraryFSAccessThroughSMs": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ArbitraryFSAccessThroughSMsConfig",
          "default": {},
          "description": "ArbitraryFSAccessThroughSMs configures whether configuration based on a service monitor can access arbitrary files on the file system of the Prometheus container e.g. bearer token files."
        },
        "baseImage": {
          "description": "Base image to use for a Prometheus deployment. Deprecated: use 'image' instead",
          "type": "string"
        },
        "configMaps": {
          "description": "ConfigMaps is a list of ConfigMaps in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. Each ConfigMap is added to the StatefulSet definition as a volume named `configmap-\u003cconfigmap-name\u003e`. The ConfigMaps are mounted into /etc/prometheus/configmaps/\u003cconfigmap-name\u003e in the 'prometheus' container.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "containers": {
          "description": "Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a Prometheus pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `prometheus`, `config-reloader`, and `thanos-sidecar`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "disableCompaction": {
          "description": "Disable prometheus compaction.",
          "type": "boolean"
        },
        "enableAdminAPI": {
          "description": "Enable access to prometheus web admin API. Defaults to the value of `false`. WARNING: Enabling the admin APIs enables mutating endpoints, to delete data, shutdown Prometheus, and more. Enabling this should be done with care and the user is advised to add additional authentication authorization via a proxy to ensure only clients authorized to perform these actions can do so. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#tsdb-admin-apis",
          "type": "boolean"
        },
        "enableFeatures": {
          "description": "Enable access to Prometheus disabled features. By default, no features are enabled. Enabling disabled features is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice. For more information see https://prometheus.io/docs/prometheus/latest/disabled_features/",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "enableRemoteWriteReceiver": {
          "description": "Enable Prometheus to be used as a receiver for the Prometheus remote write protocol. Defaults to the value of `false`. WARNING: This is not considered an efficient way of ingesting samples. Use it with caution for specific low-volume use cases. It is not suitable for replacing the ingestion via scraping and turning Prometheus into a push-based metrics collection system. For more information see https://prometheus.io/docs/prometheus/latest/querying/api/#remote-write-receiver Only valid in Prometheus versions 2.33.0 and newer.",
          "type": "boolean"
        },
        "enforcedBodySizeLimit": {
          "description": "EnforcedBodySizeLimit defines the maximum size of uncompressed response body that will be accepted by Prometheus. Targets responding with a body larger than this many bytes will cause the scrape to fail. Example: 100MB. If defined, the limit will apply to all service/pod monitors and probes. This is an experimental feature, this behaviour could change or be removed in the future. Only valid in Prometheus versions 2.28.0 and newer.",
          "type": "string"
        },
        "enforcedLabelLimit": {
          "description": "Per-scrape limit on number of labels that will be accepted for a sample. If more than this number of labels are present post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "enforcedLabelNameLengthLimit": {
          "description": "Per-scrape limit on length of labels name that will be accepted for a sample. If a label name is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "enforcedLabelValueLengthLimit": {
          "description": "Per-scrape limit on length of labels value that will be accepted for a sample. If a label value is longer than this number post metric-relabeling, the entire scrape will be treated as failed. 0 means no limit. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "enforcedNamespaceLabel": {
          "description": "EnforcedNamespaceLabel If set, a label will be added to\n\n1. all user-metrics (created by `ServiceMonitor`, `PodMonitor` and `Probe` objects) and 2. in all `PrometheusRule` objects (except the ones excluded in `prometheusRulesExcludedFromEnforce`) to\n   * alerting \u0026 recording rules and\n   * the metrics used in their expressions (`expr`).\n\nLabel name is this field's value. Label value is the namespace of the created object (mentioned above).",
          "type": "string"
        },
        "enforcedSampleLimit": {
          "description": "EnforcedSampleLimit defines global limit on number of scraped samples that will be accepted. This overrides any SampleLimit set per ServiceMonitor or/and PodMonitor. It is meant to be used by admins to enforce the SampleLimit to keep overall number of samples/series under the desired limit. Note that if SampleLimit is lower that value will be taken instead.",
          "format": "int64",
          "type": "integer"
        },
        "enforcedTargetLimit": {
          "description": "EnforcedTargetLimit defines a global limit on the number of scraped targets.  This overrides any TargetLimit set per ServiceMonitor or/and PodMonitor.  It is meant to be used by admins to enforce the TargetLimit to keep the overall number of targets under the desired limit. Note that if TargetLimit is lower, that value will be taken instead, except if either value is zero, in which case the non-zero value will be used.  If both values are zero, no limit is enforced.",
          "format": "int64",
          "type": "integer"
        },
        "evaluationInterval": {
          "description": "Interval between consecutive evaluations. Default: `30s`",
          "type": "string"
        },
        "excludedFromEnforcement": {
          "description": "List of references to PodMonitor, ServiceMonitor, Probe and PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "exemplars": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Exemplars",
          "description": "Exemplars related settings that are runtime reloadable. It requires to enable the exemplar storage feature to be effective."
        },
        "externalLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "The labels to add to any time series or alerts when communicating with external systems (federation, remote storage, Alertmanager).",
          "type": "object"
        },
        "externalUrl": {
          "description": "The external URL the Prometheus instances will be available under. This is necessary to generate correct URLs. This is necessary if Prometheus is not served from root of a DNS name.",
          "type": "string"
        },
        "hostAliases": {
          "description": "Pods' hostAliases configuration",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.HostAlias",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map"
        },
        "hostNetwork": {
          "description": "Use the host's network namespace if true. Make sure to understand the security implications if you want to enable it. When hostNetwork is enabled, this will set dnsPolicy to ClusterFirstWithHostNet automatically.",
          "type": "boolean"
        },
        "ignoreNamespaceSelectors": {
          "description": "IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from all PodMonitor, ServiceMonitor and Probe objects. They will only discover endpoints within the namespace of the PodMonitor, ServiceMonitor and Probe objects. Defaults to false.",
          "type": "boolean"
        },
        "image": {
          "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Prometheus is being configured.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy for the 'prometheus', 'init-config-reloader' and 'config-reloader' containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "An optional list of references to secrets in the same namespace to use for pulling prometheus and alertmanager images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "initContainers": {
          "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the Prometheus configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ InitContainers described here modify an operator generated init containers if they share the same name and modifications are done via a strategic merge patch. The current init container name is: `init-config-reloader`. Overriding init containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "listenLocal": {
          "description": "ListenLocal makes the Prometheus server listen on loopback, so that it does not bind against the Pod IP.",
          "type": "boolean"
        },
        "logFormat": {
          "description": "Log format for Prometheus to be configured with.",
          "type": "string"
        },
        "logLevel": {
          "description": "Log level for Prometheus to be configured with.",
          "type": "string"
        },
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.",
          "format": "int64",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Define which Nodes the Pods are scheduled on.",
          "type": "object"
        },
        "overrideHonorLabels": {
          "description": "When true, Prometheus resolves label conflicts by renaming the labels in the scraped data to \"exported_\u003clabel value\u003e\" for all targets created from service and pod monitors. Otherwise the HonorLabels field of the service or pod monitor applies.",
          "type": "boolean"
        },
        "overrideHonorTimestamps": {
          "description": "When true, Prometheus ignores the timestamps for all the targets created from service and pod monitors. Otherwise the HonorTimestamps field of the service or pod monitor applies.",
          "type": "boolean"
        },
        "paused": {
          "description": "When a Prometheus deployment is paused, no actions except for deletion will be performed on the underlying objects.",
          "type": "boolean"
        },
        "podMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedObjectMetadata",
          "description": "PodMetadata configures Labels and Annotations which are propagated to the prometheus pods."
        },
        "podMonitorNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Namespace's labels to match for PodMonitor discovery. If nil, only check own namespace."
        },
        "podMonitorSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "*Experimental* PodMonitors to be selected for target discovery.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector` and `spec.probeSelector` are null, the Prometheus configuration is unmanaged. The Prometheus operator will ensure that the Prometheus configuration's Secret exists, but it is the responsibility of the user to provide the raw gzipped Prometheus configuration under the `prometheus.yaml.gz` key. This behavior is deprecated and will be removed in the next major version of the custom resource definition. It is recommended to use `spec.additionalScrapeConfigs` instead."
        },
        "podTargetLabels": {
          "description": "PodTargetLabels are added to all Pod/ServiceMonitors' podTargetLabels",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "portName": {
          "description": "Port name used for the pods and governing service. This defaults to web",
          "type": "string"
        },
        "priorityClassName": {
          "description": "Priority class assigned to the Pods",
          "type": "string"
        },
        "probeNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "*Experimental* Namespaces to be selected for Probe discovery. If nil, only check own namespace."
        },
        "probeSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "*Experimental* Probes to be selected for target discovery.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector` and `spec.probeSelector` are null, the Prometheus configuration is unmanaged. The Prometheus operator will ensure that the Prometheus configuration's Secret exists, but it is the responsibility of the user to provide the raw gzipped Prometheus configuration under the `prometheus.yaml.gz` key. This behavior is deprecated and will be removed in the next major version of the custom resource definition. It is recommended to use `spec.additionalScrapeConfigs` instead."
        },
        "prometheusExternalLabelName": {
          "description": "Name of Prometheus external label used to denote Prometheus instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`\"\"`).",
          "type": "string"
        },
        "prometheusRulesExcludedFromEnforce": {
          "description": "PrometheusRulesExcludedFromEnforce - list of prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair. Deprecated: use excludedFromEnforcement instead.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleExcludeConfig",
            "default": {}
          },
          "type": "array"
        },
        "query": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.QuerySpec",
          "description": "QuerySpec defines the query command line flags when starting Prometheus."
        },
        "queryLogFile": {
          "description": "QueryLogFile specifies the file to which PromQL queries are logged. If the filename has an empty path, e.g. 'query.log', prometheus-operator will mount the file into an emptyDir volume at `/var/log/prometheus`. If a full path is provided, e.g. /var/log/prometheus/query.log, you must mount a volume in the specified directory and it must be writable. This is because the prometheus container runs with a read-only root filesystem for security reasons. Alternatively, the location can be set to a stdout location such as `/dev/stdout` to log query information to the default Prometheus log stream. This is only available in versions of Prometheus \u003e= 2.16.0. For more details, see the Prometheus docs (https://prometheus.io/docs/guides/query-log/)",
          "type": "string"
        },
        "remoteRead": {
          "description": "remoteRead is the list of remote read configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RemoteReadSpec",
            "default": {}
          },
          "type": "array"
        },
        "remoteWrite": {
          "description": "remoteWrite is the list of remote write configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RemoteWriteSpec",
            "default": {}
          },
          "type": "array"
        },
        "replicaExternalLabelName": {
          "description": "Name of Prometheus external label used to denote replica name. Defaults to the value of `prometheus_replica`. External label will _not_ be added when value is set to empty string (`\"\"`).",
          "type": "string"
        },
        "replicas": {
          "description": "Number of replicas of each shard to deploy for a Prometheus deployment. Number of replicas multiplied by shards is the total number of Pods created.",
          "format": "int32",
          "type": "integer"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "default": {},
          "description": "Define resources requests and limits for single Pods."
        },
        "retention": {
          "description": "Time duration Prometheus shall retain data for. Default is '24h' if retentionSize is not set, and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
          "type": "string"
        },
        "retentionSize": {
          "description": "Maximum amount of disk space used by blocks.",
          "type": "string"
        },
        "routePrefix": {
          "description": "The route prefix Prometheus registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.",
          "type": "string"
        },
        "ruleNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Namespaces to be selected for PrometheusRules discovery. If unspecified, only the same namespace as the Prometheus object is in is used."
        },
        "ruleSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A selector to select which PrometheusRules to mount for loading alerting/recording rules from. Until (excluding) Prometheus Operator v0.24.0 Prometheus Operator will migrate any legacy rule ConfigMaps to PrometheusRule custom resources selected by RuleSelector. Make sure it does not match any config maps that you do not want to be migrated."
        },
        "rules": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Rules",
          "default": {},
          "description": "/--rules.*/ command-line arguments."
        },
        "scrapeInterval": {
          "description": "Interval between consecutive scrapes. Default: `30s`",
          "type": "string"
        },
        "scrapeTimeout": {
          "description": "Number of seconds to wait for target to respond before erroring.",
          "type": "string"
        },
        "secrets": {
          "description": "Secrets is a list of Secrets in the same namespace as the Prometheus object, which shall be mounted into the Prometheus Pods. Each Secret is added to the StatefulSet definition as a volume named `secret-\u003csecret-name\u003e`. The Secrets are mounted into /etc/prometheus/secrets/\u003csecret-name\u003e in the 'prometheus' container.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext."
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Prometheus Pods.",
          "type": "string"
        },
        "serviceMonitorNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Namespace's labels to match for ServiceMonitor discovery. If nil, only check own namespace."
        },
        "serviceMonitorSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "ServiceMonitors to be selected for target discovery.\n\nIf `spec.serviceMonitorSelector`, `spec.podMonitorSelector` and `spec.probeSelector` are null, the Prometheus configuration is unmanaged. The Prometheus operator will ensure that the Prometheus configuration's Secret exists, but it is the responsibility of the user to provide the raw gzipped Prometheus configuration under the `prometheus.yaml.gz` key. This behavior is deprecated and will be removed in the next major version of the custom resource definition. It is recommended to use `spec.additionalScrapeConfigs` instead."
        },
        "sha": {
          "description": "SHA of Prometheus container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
          "type": "string"
        },
        "shards": {
          "description": "EXPERIMENTAL: Number of shards to distribute targets onto. Number of replicas multiplied by shards is the total number of Pods created. Note that scaling down shards will not reshard data onto remaining instances, it must be manually moved. Increasing shards will not reshard data either but it will continue to be available from the same instances. To query globally use Thanos sidecar and Thanos querier or remote write data to a central location. Sharding is done on the content of the `__address__` target meta-label.",
          "format": "int32",
          "type": "integer"
        },
        "storage": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.StorageSpec",
          "description": "Storage spec to specify how storage shall be used."
        },
        "tag": {
          "description": "Tag of Prometheus container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
          "type": "string"
        },
        "thanos": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosSpec",
          "description": "Thanos configuration allows configuring various aspects of a Prometheus server in a Thanos environment.\n\nThis section is experimental, it may change significantly without deprecation notice in any release.\n\nThis is experimental and may change significantly without backward compatibility in any release."
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration",
            "default": {}
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "If specified, the pod's topology spread constraints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint",
            "default": {}
          },
          "type": "array"
        },
        "tsdb": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TSDBSpec",
          "default": {},
          "description": "Defines the runtime reloadable configuration of the timeseries database (TSDB)."
        },
        "version": {
          "description": "Version of Prometheus to be deployed.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the prometheus container, that are generated as a result of StorageSpec objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount",
            "default": {}
          },
          "type": "array"
        },
        "volumes": {
          "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume",
            "default": {}
          },
          "type": "array"
        },
        "walCompression": {
          "description": "Enable compression of the write-ahead log using Snappy. This flag is only available in versions of Prometheus \u003e= 2.11.0.",
          "type": "boolean"
        },
        "web": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusWebSpec",
          "description": "Defines the web command line flags when starting Prometheus."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusWebSpec": {
      "additionalProperties": false,
      "description": "PrometheusWebSpec defines the web command line flags when starting Prometheus.",
      "properties": {
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.WebHTTPConfig",
          "description": "Defines HTTP parameters for web server."
        },
        "maxConnections": {
          "description": "Defines the maximum number of simultaneous connections A zero value means that Prometheus doesn't accept any incoming connection.",
          "format": "int32",
          "type": "integer"
        },
        "pageTitle": {
          "description": "The prometheus web page title",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.WebTLSConfig",
          "description": "Defines the TLS parameters for HTTPS."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.QuerySpec": {
      "additionalProperties": false,
      "description": "QuerySpec defines the query command line flags when starting Prometheus.",
      "properties": {
        "lookbackDelta": {
          "description": "The delta difference allowed for retrieving metrics during expression evaluations.",
          "type": "string"
        },
        "maxConcurrency": {
          "description": "Number of concurrent queries that can be run at once.",
          "format": "int32",
          "type": "integer"
        },
        "maxSamples": {
          "description": "Maximum number of samples a single query can load into memory. Note that queries will fail if they would load more samples than this into memory, so this also limits the number of samples a query can return.",
          "format": "int32",
          "type": "integer"
        },
        "timeout": {
          "description": "Maximum time a query may take before being aborted.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.QueueConfig": {
      "additionalProperties": false,
      "description": "QueueConfig allows the tuning of remote write's queue_config parameters. This object is referenced in the RemoteWriteSpec object.",
      "properties": {
        "batchSendDeadline": {
          "description": "BatchSendDeadline is the maximum time a sample will wait in buffer.",
          "type": "string"
        },
        "capacity": {
          "description": "Capacity is the number of samples to buffer per shard before we start dropping them.",
          "format": "int32",
          "type": "integer"
        },
        "maxBackoff": {
          "description": "MaxBackoff is the maximum retry delay.",
          "type": "string"
        },
        "maxRetries": {
          "description": "MaxRetries is the maximum number of times to retry a batch on recoverable errors.",
          "format": "int32",
          "type": "integer"
        },
        "maxSamplesPerSend": {
          "description": "MaxSamplesPerSend is the maximum number of samples per send.",
          "format": "int32",
          "type": "integer"
        },
        "maxShards": {
          "description": "MaxShards is the maximum number of shards, i.e. amount of concurrency.",
          "format": "int32",
          "type": "integer"
        },
        "minBackoff": {
          "description": "MinBackoff is the initial retry delay. Gets doubled for every retry.",
          "type": "string"
        },
        "minShards": {
          "description": "MinShards is the minimum number of shards, i.e. amount of concurrency.",
          "format": "int32",
          "type": "integer"
        },
        "retryOnRateLimit": {
          "description": "Retry upon receiving a 429 status code from the remote-write storage. This is experimental feature and might change in the future.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig": {
      "additionalProperties": false,
      "description": "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `\u003cmetric_relabel_configs\u003e`-section of Prometheus configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
      "properties": {
        "action": {
          "description": "Action to perform based on regex matching. Default is 'replace'. uppercase and lowercase actions require Prometheus \u003e= 2.36.",
          "type": "string"
        },
        "modulus": {
          "description": "Modulus to take of the hash of the source label values.",
          "format": "int64",
          "type": "integer"
        },
        "regex": {
          "description": "Regular expression against which the extracted value is matched. Default is '(.*)'",
          "type": "string"
        },
        "replacement": {
          "description": "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
          "type": "string"
        },
        "separator": {
          "description": "Separator placed between concatenated source label values. default is ';'.",
          "type": "string"
        },
        "sourceLabels": {
          "description": "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "targetLabel": {
          "description": "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RemoteReadSpec": {
      "additionalProperties": false,
      "description": "RemoteReadSpec defines the configuration for Prometheus to read back samples from a remote endpoint.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Authorization",
          "description": "Authorization section for remote read"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth for the URL."
        },
        "bearerToken": {
          "description": "Bearer token for remote read.",
          "type": "string"
        },
        "bearerTokenFile": {
          "description": "File to read bearer token for remote read.",
          "type": "string"
        },
        "filterExternalLabels": {
          "description": "Whether to use the external labels as selectors for the remote read endpoint. Requires Prometheus v2.34.0 and above.",
          "type": "boolean"
        },
        "headers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Custom HTTP headers to be sent along with each remote read request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.26.0 and newer.",
          "type": "object"
        },
        "name": {
          "description": "The name of the remote read queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate read configurations.  Only valid in Prometheus versions 2.15.0 and newer.",
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "proxyUrl": {
          "description": "Optional ProxyURL.",
          "type": "string"
        },
        "readRecent": {
          "description": "Whether reads should be made for queries for time ranges that the local storage should have complete data for.",
          "type": "boolean"
        },
        "remoteTimeout": {
          "description": "Timeout for requests to the remote read endpoint.",
          "type": "string"
        },
        "requiredMatchers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "An optional list of equality matchers which have to be present in a selector to query the remote read endpoint.",
          "type": "object"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "TLS Config to use for remote read."
        },
        "url": {
          "default": "",
          "description": "The URL of the endpoint to query from.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RemoteWriteSpec": {
      "additionalProperties": false,
      "description": "RemoteWriteSpec defines the configuration to write samples from Prometheus to a remote endpoint.",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Authorization",
          "description": "Authorization section for remote write"
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth for the URL."
        },
        "bearerToken": {
          "description": "Bearer token for remote write.",
          "type": "string"
        },
        "bearerTokenFile": {
          "description": "File to read bearer token for remote write.",
          "type": "string"
        },
        "headers": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Custom HTTP headers to be sent along with each remote write request. Be aware that headers that are set by Prometheus itself can't be overwritten. Only valid in Prometheus versions 2.25.0 and newer.",
          "type": "object"
        },
        "metadataConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.MetadataConfig",
          "description": "MetadataConfig configures the sending of series metadata to the remote storage."
        },
        "name": {
          "description": "The name of the remote write queue, it must be unique if specified. The name is used in metrics and logging in order to differentiate queues. Only valid in Prometheus versions 2.15.0 and newer.",
          "type": "string"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 for the URL. Only valid in Prometheus versions 2.27.0 and newer."
        },
        "proxyUrl": {
          "description": "Optional ProxyURL.",
          "type": "string"
        },
        "queueConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.QueueConfig",
          "description": "QueueConfig allows tuning of the remote write queue parameters."
        },
        "remoteTimeout": {
          "description": "Timeout for requests to the remote write endpoint.",
          "type": "string"
        },
        "sendExemplars": {
          "description": "Enables sending of exemplars over remote write. Note that exemplar-storage itself must be enabled using the enableFeature option for exemplars to be scraped in the first place.  Only valid in Prometheus versions 2.27.0 and newer.",
          "type": "boolean"
        },
        "sigv4": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Sigv4",
          "description": "Sigv4 allows to configures AWS's Signature Verification 4"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "TLS Config to use for remote write."
        },
        "url": {
          "default": "",
          "description": "The URL of the endpoint to send samples to.",
          "type": "string"
        },
        "writeRelabelConfigs": {
          "description": "The list of remote write relabel configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RelabelConfig",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Rule": {
      "additionalProperties": false,
      "description": "Rule describes an alerting or recording rule See Prometheus documentation: [alerting](https://www.prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) or [recording](https://www.prometheus.io/docs/prometheus/latest/configuration/recording_rules/#recording-rules) rule",
      "properties": {
        "alert": {
          "description": "Name of the alert. Must be a valid label value. Only one of `record` and `alert` must be set.",
          "type": "string"
        },
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations to add to each alert. Only valid for alerting rules.",
          "type": "object"
        },
        "expr": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": {},
          "description": "PromQL expression to evaluate."
        },
        "for": {
          "description": "Alerts are considered firing once they have been returned for this long.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Labels to add or overwrite.",
          "type": "object"
        },
        "record": {
          "description": "Name of the time series to output to. Must be a valid metric name. Only one of `record` and `alert` must be set.",
          "type": "string"
        }
      },
      "required": [
        "expr"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RuleGroup": {
      "additionalProperties": false,
      "description": "RuleGroup is a list of sequentially evaluated recording and alerting rules.",
      "properties": {
        "interval": {
          "description": "Interval determines how often rules in the group are evaluated.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the rule group.",
          "type": "string"
        },
        "partial_response_strategy": {
          "description": "PartialResponseStrategy is only used by ThanosRuler and will be ignored by Prometheus instances. More info: https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md#partial-response",
          "type": "string"
        },
        "rules": {
          "description": "List of alerting and recording rules.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Rule",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "name",
        "rules"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Rules": {
      "additionalProperties": false,
      "description": "/--rules.*/ command-line arguments",
      "properties": {
        "alert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.RulesAlert",
          "default": {}
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.RulesAlert": {
      "additionalProperties": false,
      "description": "/--rules.alert.*/ command-line arguments",
      "properties": {
        "forGracePeriod": {
          "description": "Minimum duration between alert and restored 'for' state. This is maintained only for alerts with configured 'for' time greater than grace period.",
          "type": "string"
        },
        "forOutageTolerance": {
          "description": "Max time to tolerate prometheus outage for restoring 'for' state of alert.",
          "type": "string"
        },
        "resendDelay": {
          "description": "Minimum amount of time to wait before resending an alert to Alertmanager.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization": {
      "additionalProperties": false,
      "description": "SafeAuthorization specifies a subset of the Authorization struct, that is safe for use in Endpoints (no CredentialsFile field)",
      "properties": {
        "credentials": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "The secret's key that contains the credentials of the request"
        },
        "type": {
          "description": "Set the authentication type. Defaults to Bearer, Basic will cause an error",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig": {
      "additionalProperties": false,
      "description": "SafeTLSConfig specifies safe TLS configuration parameters.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Certificate authority used when verifying server certificates."
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Client certificate to present when doing client-authentication."
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap": {
      "additionalProperties": false,
      "description": "SecretOrConfigMap allows to specify data as a Secret or ConfigMap. Fields are mutually exclusive.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "ConfigMap containing data to use for the targets."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing data to use for the targets."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ServiceMonitorSpec": {
      "additionalProperties": false,
      "description": "ServiceMonitorSpec contains specification parameters for a ServiceMonitor.",
      "properties": {
        "attachMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AttachMetadata",
          "description": "Attaches node metadata to discovered targets. Requires Prometheus v2.37.0 and above."
        },
        "endpoints": {
          "description": "A list of endpoints allowed as part of this ServiceMonitor.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Endpoint",
            "default": {}
          },
          "type": "array"
        },
        "jobLabel": {
          "description": "JobLabel selects the label from the associated Kubernetes service which will be used as the `job` label for all metrics.\n\nFor example: If in `ServiceMonitor.spec.jobLabel: foo` and in `Service.metadata.labels.foo: bar`, then the `job=\"bar\"` label is added to all metrics.\n\nIf the value of this field is empty or if the label doesn't exist for the given Service, the `job` label of the metrics defaults to the name of the Kubernetes Service.",
          "type": "string"
        },
        "labelLimit": {
          "description": "Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelNameLengthLimit": {
          "description": "Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "labelValueLengthLimit": {
          "description": "Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.",
          "format": "int64",
          "type": "integer"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.NamespaceSelector",
          "default": {},
          "description": "Selector to select which namespaces the Kubernetes Endpoints objects are discovered from."
        },
        "podTargetLabels": {
          "description": "PodTargetLabels transfers labels on the Kubernetes `Pod` onto the created metrics.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "sampleLimit": {
          "description": "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
          "format": "int64",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "default": {},
          "description": "Selector to select Endpoints objects."
        },
        "targetLabels": {
          "description": "TargetLabels transfers labels from the Kubernetes `Service` onto the created metrics.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "targetLimit": {
          "description": "TargetLimit defines a limit on the number of scraped targets that will be accepted.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "endpoints",
        "selector"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.Sigv4": {
      "additionalProperties": false,
      "description": "Sigv4 optionally configures AWS's Signature Verification 4 signing process to sign requests. Cannot be set at the same time as basic_auth or authorization.",
      "properties": {
        "accessKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AccessKey is the AWS API key. If blank, the environment variable `AWS_ACCESS_KEY_ID` is used."
        },
        "profile": {
          "description": "Profile is the named AWS profile used to authenticate.",
          "type": "string"
        },
        "region": {
          "description": "Region is the AWS region. If blank, the region from the default credentials chain used.",
          "type": "string"
        },
        "roleArn": {
          "description": "RoleArn is the named AWS profile used to authenticate.",
          "type": "string"
        },
        "secretKey": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "SecretKey is the AWS API secret. If blank, the environment variable `AWS_SECRET_ACCESS_KEY` is used."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.StorageSpec": {
      "additionalProperties": false,
      "description": "StorageSpec defines the configured storage for a group Prometheus servers. If no storage option is specified, then by default an [EmptyDir](https://kubernetes.io/docs/concepts/storage/volumes/#emptydir) will be used. If multiple storage options are specified, priority will be given as follows: EmptyDir, Ephemeral, and lastly VolumeClaimTemplate.",
      "properties": {
        "disableMountSubPath": {
          "description": "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
          "type": "boolean"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "EmptyDirVolumeSource to be used by the StatefulSet. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir"
        },
        "ephemeral": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
          "description": "EphemeralVolumeSource to be used by the StatefulSet. This is a beta field in k8s 1.21, for lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate. More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes"
        },
        "volumeClaimTemplate": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedPersistentVolumeClaim",
          "default": {},
          "description": "A PVC spec to be used by the StatefulSet. The easiest way to use a volume that cannot be automatically provisioned (for whatever reason) is to use a label selector alongside manually created PersistentVolumes."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig": {
      "additionalProperties": false,
      "description": "TLSConfig extends the safe TLS configuration with file parameters.",
      "properties": {
        "ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Certificate authority used when verifying server certificates."
        },
        "caFile": {
          "description": "Path to the CA cert in the Prometheus container to use for the targets.",
          "type": "string"
        },
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Client certificate to present when doing client-authentication."
        },
        "certFile": {
          "description": "Path to the client cert file in the Prometheus container for the targets.",
          "type": "string"
        },
        "insecureSkipVerify": {
          "description": "Disable target certificate validation.",
          "type": "boolean"
        },
        "keyFile": {
          "description": "Path to the client key file in the Prometheus container for the targets.",
          "type": "string"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Secret containing the client key file for the targets."
        },
        "serverName": {
          "description": "Used to verify the hostname for the targets.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.TSDBSpec": {
      "additionalProperties": false,
      "properties": {
        "outOfOrderTimeWindow": {
          "description": "Configures how old an out-of-order/out-of-bounds sample can be w.r.t. the TSDB max time. An out-of-order/out-of-bounds sample is ingested into the TSDB as long as the timestamp of the sample is \u003e= (TSDB.MaxTime - outOfOrderTimeWindow). Out of order ingestion is an experimental feature and requires Prometheus \u003e= v2.39.0.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosRulerSpec": {
      "additionalProperties": false,
      "description": "ThanosRulerSpec is a specification of the desired behavior of the ThanosRuler. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
      "properties": {
        "additionalArgs": {
          "description": "AdditionalArgs allows setting additional arguments for the ThanosRuler container. It is intended for e.g. activating hidden flags which are not supported by the dedicated configuration options yet. The arguments are passed as-is to the ThanosRuler container which may cause issues if they are invalid or not supported by the given ThanosRuler version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Argument",
            "default": {}
          },
          "type": "array"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints."
        },
        "alertDropLabels": {
          "description": "AlertDropLabels configure the label names which should be dropped in ThanosRuler alerts. The replica label `thanos_ruler_replica` will always be dropped in alerts.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "alertQueryUrl": {
          "description": "The external Query URL the Thanos Ruler will set in the 'Source' field of all alerts. Maps to the '--alert.query-url' CLI arg.",
          "type": "string"
        },
        "alertRelabelConfigFile": {
          "description": "AlertRelabelConfigFile specifies the path of the alert relabeling configuration file. When used alongside with AlertRelabelConfigs, alertRelabelConfigFile takes precedence.",
          "type": "string"
        },
        "alertRelabelConfigs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "AlertRelabelConfigs configures alert relabeling in ThanosRuler. Alert relabel configurations must have the form as specified in the official Prometheus documentation: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs Alternative to AlertRelabelConfigFile, and lower order priority."
        },
        "alertmanagersConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Define configuration for connecting to alertmanager.  Only available with thanos v0.10.0 and higher.  Maps to the `alertmanagers.config` arg."
        },
        "alertmanagersUrl": {
          "description": "Define URLs to send alerts to Alertmanager.  For Thanos v0.10.0 and higher, AlertManagersConfig should be used instead.  Note: this field will be ignored if AlertManagersConfig is specified. Maps to the `alertmanagers.url` arg.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "containers": {
          "description": "Containers allows injecting additional containers or modifying operator generated containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or to change the behavior of an operator generated container. Containers described here modify an operator generated container if they share the same name and modifications are done via a strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`. Overriding containers is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "enforcedNamespaceLabel": {
          "description": "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
          "type": "string"
        },
        "evaluationInterval": {
          "description": "Interval between consecutive evaluations.",
          "type": "string"
        },
        "excludedFromEnforcement": {
          "description": "List of references to PrometheusRule objects to be excluded from enforcing a namespace label of origin. Applies only if enforcedNamespaceLabel set to true.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "externalPrefix": {
          "description": "The external URL the Thanos Ruler instances will be available under. This is necessary to generate correct URLs. This is necessary if Thanos Ruler is not served from root of a DNS name.",
          "type": "string"
        },
        "grpcServerTlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "GRPCServerTLSConfig configures the gRPC server from which Thanos Querier reads recorded rule data. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args."
        },
        "hostAliases": {
          "description": "Pods' hostAliases configuration",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.HostAlias",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "ip"
          ],
          "x-kubernetes-list-type": "map"
        },
        "image": {
          "description": "Thanos container image URL.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers. See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "An optional list of references to secrets in the same namespace to use for pulling thanos images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "initContainers": {
          "description": "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the ThanosRuler configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container",
            "default": {}
          },
          "type": "array"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Labels configure the external label pairs to ThanosRuler. A default replica label `thanos_ruler_replica` will be always added  as a label with the value of the pod's name and it will be dropped in the alerts.",
          "type": "object"
        },
        "listenLocal": {
          "description": "ListenLocal makes the Thanos ruler listen on loopback, so that it does not bind against the Pod IP.",
          "type": "boolean"
        },
        "logFormat": {
          "description": "Log format for ThanosRuler to be configured with.",
          "type": "string"
        },
        "logLevel": {
          "description": "Log level for ThanosRuler to be configured with.",
          "type": "string"
        },
        "minReadySeconds": {
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready) This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.",
          "format": "int64",
          "type": "integer"
        },
        "nodeSelector": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Define which Nodes the Pods are scheduled on.",
          "type": "object"
        },
        "objectStorageConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority."
        },
        "objectStorageConfigFile": {
          "description": "ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.",
          "type": "string"
        },
        "paused": {
          "description": "When a ThanosRuler deployment is paused, no actions except for deletion will be performed on the underlying objects.",
          "type": "boolean"
        },
        "podMetadata": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.EmbeddedObjectMetadata",
          "description": "PodMetadata contains Labels and Annotations gets propagated to the thanos ruler pods."
        },
        "portName": {
          "description": "Port name used for the pods and governing service. This defaults to web",
          "type": "string"
        },
        "priorityClassName": {
          "description": "Priority class assigned to the Pods",
          "type": "string"
        },
        "prometheusRulesExcludedFromEnforce": {
          "description": "PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing of adding namespace labels. Works only if enforcedNamespaceLabel set to true. Make sure both ruleNamespace and ruleName are set for each pair Deprecated: use excludedFromEnforcement instead.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleExcludeConfig",
            "default": {}
          },
          "type": "array"
        },
        "queryConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Define configuration for connecting to thanos query instances. If this is defined, the QueryEndpoints field will be ignored. Maps to the `query.config` CLI argument. Only available with thanos v0.11.0 and higher."
        },
        "queryEndpoints": {
          "description": "QueryEndpoints defines Thanos querier endpoints from which to query metrics. Maps to the --query flag of thanos ruler.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "replicas": {
          "description": "Number of thanos ruler instances to deploy.",
          "format": "int32",
          "type": "integer"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "default": {},
          "description": "Resources defines the resource requirements for single Pods. If not provided, no requests/limits will be set"
        },
        "retention": {
          "description": "Time duration ThanosRuler shall retain data for. Default is '24h', and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).",
          "type": "string"
        },
        "routePrefix": {
          "description": "The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.",
          "type": "string"
        },
        "ruleNamespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Namespaces to be selected for Rules discovery. If unspecified, only the same namespace as the ThanosRuler object is in is used."
        },
        "ruleSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label selector to select which PrometheusRules to mount for alerting and recording."
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext."
        },
        "serviceAccountName": {
          "description": "ServiceAccountName is the name of the ServiceAccount to use to run the Thanos Ruler Pods.",
          "type": "string"
        },
        "storage": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.StorageSpec",
          "description": "Storage spec to specify how storage shall be used."
        },
        "tolerations": {
          "description": "If specified, the pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration",
            "default": {}
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "If specified, the pod's topology spread constraints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint",
            "default": {}
          },
          "type": "array"
        },
        "tracingConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way."
        },
        "tracingConfigFile": {
          "description": "TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.",
          "type": "string"
        },
        "version": {
          "description": "Version of Thanos to be deployed.",
          "type": "string"
        },
        "volumes": {
          "description": "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosSpec": {
      "additionalProperties": false,
      "description": "ThanosSpec defines parameters for a Prometheus server within a Thanos deployment.",
      "properties": {
        "additionalArgs": {
          "description": "AdditionalArgs allows setting additional arguments for the Thanos container. The arguments are passed as-is to the Thanos container which may cause issues if they are invalid or not supported the given Thanos version. In case of an argument conflict (e.g. an argument which is already set by the operator itself) or when providing an invalid argument the reconciliation will fail and an error will be logged.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Argument",
            "default": {}
          },
          "type": "array"
        },
        "baseImage": {
          "description": "Thanos base image if other than default. Deprecated: use 'image' instead",
          "type": "string"
        },
        "grpcListenLocal": {
          "description": "If true, the Thanos sidecar listens on the loopback interface for the gRPC endpoints. It has no effect if `listenLocal` is true.",
          "type": "boolean"
        },
        "grpcServerTlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.TLSConfig",
          "description": "GRPCServerTLSConfig configures the TLS parameters for the gRPC server providing the StoreAPI. Note: Currently only the CAFile, CertFile, and KeyFile fields are supported. Maps to the '--grpc-server-tls-*' CLI args."
        },
        "httpListenLocal": {
          "description": "If true, the Thanos sidecar listens on the loopback interface for the HTTP endpoints. It has no effect if `listenLocal` is true.",
          "type": "boolean"
        },
        "image": {
          "description": "Image if specified has precedence over baseImage, tag and sha combinations. Specifying the version is still necessary to ensure the Prometheus Operator knows what version of Thanos is being configured.",
          "type": "string"
        },
        "listenLocal": {
          "description": "If true, the Thanos sidecar listens on the loopback interface for the HTTP and gRPC endpoints. It takes precedence over `grpcListenLocal` and `httpListenLocal`. Deprecated: use `grpcListenLocal` and `httpListenLocal` instead.",
          "type": "boolean"
        },
        "logFormat": {
          "description": "LogFormat for Thanos sidecar to be configured with.",
          "type": "string"
        },
        "logLevel": {
          "description": "LogLevel for Thanos sidecar to be configured with.",
          "type": "string"
        },
        "minTime": {
          "description": "MinTime for Thanos sidecar to be configured with. Option can be a constant time in RFC3339 format or time duration relative to current time, such as -1d or 2h45m. Valid duration units are ms, s, m, h, d, w, y.",
          "type": "string"
        },
        "objectStorageConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "ObjectStorageConfig configures object storage in Thanos. Alternative to ObjectStorageConfigFile, and lower order priority."
        },
        "objectStorageConfigFile": {
          "description": "ObjectStorageConfigFile specifies the path of the object storage configuration file. When used alongside with ObjectStorageConfig, ObjectStorageConfigFile takes precedence.",
          "type": "string"
        },
        "readyTimeout": {
          "description": "ReadyTimeout is the maximum time Thanos sidecar will wait for Prometheus to start. Eg 10m",
          "type": "string"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "default": {},
          "description": "Resources defines the resource requirements for the Thanos sidecar. If not provided, no requests/limits will be set"
        },
        "sha": {
          "description": "SHA of Thanos container image to be deployed. Defaults to the value of `version`. Similar to a tag, but the SHA explicitly deploys an immutable container image. Version and Tag are ignored if SHA is set. Deprecated: use 'image' instead.  The image digest can be specified as part of the image URL.",
          "type": "string"
        },
        "tag": {
          "description": "Tag of Thanos sidecar container image to be deployed. Defaults to the value of `version`. Version is ignored if Tag is set. Deprecated: use 'image' instead.  The image tag can be specified as part of the image URL.",
          "type": "string"
        },
        "tracingConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "TracingConfig configures tracing in Thanos. This is an experimental feature, it may change in any upcoming release in a breaking way."
        },
        "tracingConfigFile": {
          "description": "TracingConfig specifies the path of the tracing configuration file. When used alongside with TracingConfig, TracingConfigFile takes precedence.",
          "type": "string"
        },
        "version": {
          "description": "Version describes the version of Thanos to use.",
          "type": "string"
        },
        "volumeMounts": {
          "description": "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the thanos-sidecar container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.WebHTTPConfig": {
      "additionalProperties": false,
      "description": "WebHTTPConfig defines HTTP parameters for web server.",
      "properties": {
        "headers": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.WebHTTPHeaders",
          "description": "List of headers that can be added to HTTP responses."
        },
        "http2": {
          "description": "Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS. When TLSConfig is not configured, HTTP/2 will be disabled. Whenever the value of the field changes, a rolling update will be triggered.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.WebHTTPHeaders": {
      "additionalProperties": false,
      "description": "WebHTTPHeaders defines the list of headers that can be added to HTTP responses.",
      "properties": {
        "contentSecurityPolicy": {
          "description": "Set the Content-Security-Policy header to HTTP responses. Unset if blank.",
          "type": "string"
        },
        "strictTransportSecurity": {
          "description": "Set the Strict-Transport-Security header to HTTP responses. Unset if blank. Please make sure that you use this with care as this header might force browsers to load Prometheus and the other applications hosted on the same domain and subdomains over HTTPS. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security",
          "type": "string"
        },
        "xContentTypeOptions": {
          "description": "Set the X-Content-Type-Options header to HTTP responses. Unset if blank. Accepted value is nosniff. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options",
          "type": "string"
        },
        "xFrameOptions": {
          "description": "Set the X-Frame-Options header to HTTP responses. Unset if blank. Accepted values are deny and sameorigin. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options",
          "type": "string"
        },
        "xXSSProtection": {
          "description": "Set the X-XSS-Protection header to all responses. Unset if blank. https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1.WebTLSConfig": {
      "additionalProperties": false,
      "description": "WebTLSConfig defines the TLS parameters for HTTPS.",
      "properties": {
        "cert": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Contains the TLS certificate for the server."
        },
        "cipherSuites": {
          "description": "List of supported cipher suites for TLS versions up to TLS 1.2. If empty, Go default cipher suites are used. Available cipher suites are documented in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "clientAuthType": {
          "description": "Server policy for client authentication. Maps to ClientAuth Policies. For more detail on clientAuth options: https://golang.org/pkg/crypto/tls/#ClientAuthType",
          "type": "string"
        },
        "client_ca": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SecretOrConfigMap",
          "default": {},
          "description": "Contains the CA certificate for client certificate authentication to the server."
        },
        "curvePreferences": {
          "description": "Elliptic curves that will be used in an ECDHE handshake, in preference order. Available curves are documented in the go documentation: https://golang.org/pkg/crypto/tls/#CurveID",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "keySecret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "default": {},
          "description": "Secret containing the TLS key for the server."
        },
        "maxVersion": {
          "description": "Maximum TLS version that is acceptable. Defaults to TLS13.",
          "type": "string"
        },
        "minVersion": {
          "description": "Minimum TLS version that is acceptable. Defaults to TLS12.",
          "type": "string"
        },
        "preferServerCipherSuites": {
          "description": "Controls whether the server selects the client's most preferred cipher suite, or the server's most preferred cipher suite. If true then the server's preference, as expressed in the order of elements in cipherSuites, is used.",
          "type": "boolean"
        }
      },
      "required": [
        "keySecret",
        "cert"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfigSpec": {
      "additionalProperties": false,
      "description": "AlertmanagerConfigSpec is a specification of the desired behavior of the Alertmanager configuration. By definition, the Alertmanager configuration only applies to alerts for which the `namespace` label is equal to the namespace of the AlertmanagerConfig resource.",
      "properties": {
        "inhibitRules": {
          "description": "List of inhibition rules. The rules will only apply to alerts matching the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.InhibitRule",
            "default": {}
          },
          "type": "array"
        },
        "receivers": {
          "description": "List of receivers.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Receiver",
            "default": {}
          },
          "type": "array"
        },
        "route": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Route",
          "description": "The Alertmanager route definition for alerts matching the resource's namespace. If present, it will be added to the generated Alertmanager configuration as a first-level route."
        },
        "timeIntervals": {
          "description": "List of TimeInterval specifying when the routes should be muted or active.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeInterval",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.DayOfMonthRange": {
      "additionalProperties": false,
      "description": "DayOfMonthRange is an inclusive range of days of the month beginning at 1",
      "properties": {
        "end": {
          "description": "End of the inclusive range",
          "format": "int32",
          "type": "integer"
        },
        "start": {
          "description": "Start of the inclusive range",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.EmailConfig": {
      "additionalProperties": false,
      "description": "EmailConfig configures notifications via Email.",
      "properties": {
        "authIdentity": {
          "description": "The identity to use for authentication.",
          "type": "string"
        },
        "authPassword": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the password to use for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "authSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the CRAM-MD5 secret. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "authUsername": {
          "description": "The username to use for authentication.",
          "type": "string"
        },
        "from": {
          "description": "The sender address.",
          "type": "string"
        },
        "headers": {
          "description": "Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "hello": {
          "description": "The hostname to identify to the SMTP server.",
          "type": "string"
        },
        "html": {
          "description": "The HTML body of the email notification.",
          "type": "string"
        },
        "requireTLS": {
          "description": "The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.",
          "type": "boolean"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "smarthost": {
          "description": "The SMTP host and port through which emails are sent. E.g. example.com:25",
          "type": "string"
        },
        "text": {
          "description": "The text body of the email notification.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig",
          "description": "TLS configuration"
        },
        "to": {
          "description": "The email address to send notifications to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig": {
      "additionalProperties": false,
      "description": "HTTPConfig defines a client HTTP configuration. See https://prometheus.io/docs/alerting/latest/configuration/#http_config",
      "properties": {
        "authorization": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeAuthorization",
          "description": "Authorization header configuration for the client. This is mutually exclusive with BasicAuth and is only available starting from Alertmanager v0.22+."
        },
        "basicAuth": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.BasicAuth",
          "description": "BasicAuth for the client. This is mutually exclusive with Authorization. If both are defined, BasicAuth takes precedence."
        },
        "bearerTokenSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the bearer token to be used by the client for authentication. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "followRedirects": {
          "description": "FollowRedirects specifies whether the client should follow HTTP 3xx redirects.",
          "type": "boolean"
        },
        "oauth2": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.OAuth2",
          "description": "OAuth2 client credentials used to fetch a token for the targets."
        },
        "proxyURL": {
          "description": "Optional proxy URL.",
          "type": "string"
        },
        "tlsConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.SafeTLSConfig",
          "description": "TLS configuration for the client."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.InhibitRule": {
      "additionalProperties": false,
      "description": "InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule",
      "properties": {
        "equal": {
          "description": "Labels that must have an equal value in the source and target alert for the inhibition to take effect.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "sourceMatch": {
          "description": "Matchers for which one or more alerts have to exist for the inhibition to take effect. The operator enforces that the alert matches the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        },
        "targetMatch": {
          "description": "Matchers that have to be fulfilled in the alerts to be muted. The operator enforces that the alert matches the resource's namespace.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue": {
      "additionalProperties": false,
      "description": "KeyValue defines a (key, value) tuple.",
      "properties": {
        "key": {
          "default": "",
          "description": "Key of the tuple.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value of the tuple.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "value"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher": {
      "additionalProperties": false,
      "description": "Matcher defines how to match on alert's labels.",
      "properties": {
        "matchType": {
          "description": "Match operator, one of `=` (equal to), `!=` (not equal to), `=~` (regex match) or `!~` (not regex match). Negative operators (`!=` and `!~`) require Alertmanager \u003e= v0.22.0.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Label to match.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Label value to match.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfig": {
      "additionalProperties": false,
      "description": "OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config",
      "properties": {
        "actions": {
          "description": "Comma separated list of actions that will be available for the alert.",
          "type": "string"
        },
        "apiKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the OpsGenie API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiURL": {
          "description": "The URL to send OpsGenie API requests to.",
          "type": "string"
        },
        "description": {
          "description": "Description of the incident.",
          "type": "string"
        },
        "details": {
          "description": "A set of arbitrary key/value pairs that provide further detail about the incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "entity": {
          "description": "Optional field that can be used to specify which domain alert is related to.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Alert text limited to 130 characters.",
          "type": "string"
        },
        "note": {
          "description": "Additional alert note.",
          "type": "string"
        },
        "priority": {
          "description": "Priority level of alert. Possible values are P1, P2, P3, P4, and P5.",
          "type": "string"
        },
        "responders": {
          "description": "List of responders responsible for notifications.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfigResponder",
            "default": {}
          },
          "type": "array"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "source": {
          "description": "Backlink to the sender of the notification.",
          "type": "string"
        },
        "tags": {
          "description": "Comma separated list of tags attached to the notifications.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfigResponder": {
      "additionalProperties": false,
      "description": "OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.",
      "properties": {
        "id": {
          "description": "ID of the responder.",
          "type": "string"
        },
        "name": {
          "description": "Name of the responder.",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type of responder.",
          "type": "string"
        },
        "username": {
          "description": "Username of the responder.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyConfig": {
      "additionalProperties": false,
      "description": "PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config",
      "properties": {
        "class": {
          "description": "The class/type of the event.",
          "type": "string"
        },
        "client": {
          "description": "Client identification.",
          "type": "string"
        },
        "clientURL": {
          "description": "Backlink to the sender of notification.",
          "type": "string"
        },
        "component": {
          "description": "The part or component of the affected system that is broken.",
          "type": "string"
        },
        "description": {
          "description": "Description of the incident.",
          "type": "string"
        },
        "details": {
          "description": "Arbitrary key/value pairs that provide further detail about the incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "group": {
          "description": "A cluster or grouping of sources.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "pagerDutyImageConfigs": {
          "description": "A list of image details to attach that provide further detail about an incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyImageConfig",
            "default": {}
          },
          "type": "array"
        },
        "pagerDutyLinkConfigs": {
          "description": "A list of link details to attach that provide further detail about an incident.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyLinkConfig",
            "default": {}
          },
          "type": "array"
        },
        "routingKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "serviceKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the PagerDuty service key (when using integration type \"Prometheus\"). Either this field or `routingKey` needs to be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "severity": {
          "description": "Severity of the incident.",
          "type": "string"
        },
        "url": {
          "description": "The URL to send requests to.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyImageConfig": {
      "additionalProperties": false,
      "description": "PagerDutyImageConfig attaches images to an incident",
      "properties": {
        "alt": {
          "description": "Alt is the optional alternative text for the image.",
          "type": "string"
        },
        "href": {
          "description": "Optional URL; makes the image a clickable link.",
          "type": "string"
        },
        "src": {
          "description": "Src of the image being attached to the incident",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyLinkConfig": {
      "additionalProperties": false,
      "description": "PagerDutyLinkConfig attaches text links to an incident",
      "properties": {
        "alt": {
          "description": "Text that describes the purpose of the link, and can be used as the link's text.",
          "type": "string"
        },
        "href": {
          "description": "Href is the URL of the link to be attached",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PushoverConfig": {
      "additionalProperties": false,
      "description": "PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config",
      "properties": {
        "expire": {
          "description": "How long your notification will continue to be retried for, unless the user acknowledges the notification.",
          "type": "string"
        },
        "html": {
          "description": "Whether notification message is HTML or plain text.",
          "type": "boolean"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Notification message.",
          "type": "string"
        },
        "priority": {
          "description": "Priority, see https://pushover.net/api#priority",
          "type": "string"
        },
        "retry": {
          "description": "How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "sound": {
          "description": "The name of one of the sounds supported by device clients to override the user's default sound choice",
          "type": "string"
        },
        "title": {
          "description": "Notification title.",
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the registered application's API token, see https://pushover.net/apps. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "url": {
          "description": "A supplementary URL shown alongside the message.",
          "type": "string"
        },
        "urlTitle": {
          "description": "A title for supplementary URL, otherwise just the URL is shown",
          "type": "string"
        },
        "userKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the recipient user's user key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Receiver": {
      "additionalProperties": false,
      "description": "Receiver defines one or more notification integrations.",
      "properties": {
        "emailConfigs": {
          "description": "List of Email configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.EmailConfig",
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "default": "",
          "description": "Name of the receiver. Must be unique across all items from the list.",
          "type": "string"
        },
        "opsgenieConfigs": {
          "description": "List of OpsGenie configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.OpsGenieConfig",
            "default": {}
          },
          "type": "array"
        },
        "pagerdutyConfigs": {
          "description": "List of PagerDuty configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PagerDutyConfig",
            "default": {}
          },
          "type": "array"
        },
        "pushoverConfigs": {
          "description": "List of Pushover configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.PushoverConfig",
            "default": {}
          },
          "type": "array"
        },
        "slackConfigs": {
          "description": "List of Slack configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfig",
            "default": {}
          },
          "type": "array"
        },
        "snsConfigs": {
          "description": "List of SNS configurations",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SNSConfig",
            "default": {}
          },
          "type": "array"
        },
        "telegramConfigs": {
          "description": "List of Telegram configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TelegramConfig",
            "default": {}
          },
          "type": "array"
        },
        "victoropsConfigs": {
          "description": "List of VictorOps configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.VictorOpsConfig",
            "default": {}
          },
          "type": "array"
        },
        "webhookConfigs": {
          "description": "List of webhook configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WebhookConfig",
            "default": {}
          },
          "type": "array"
        },
        "wechatConfigs": {
          "description": "List of WeChat configurations.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WeChatConfig",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Route": {
      "additionalProperties": false,
      "description": "Route defines a node in the routing tree.",
      "properties": {
        "activeTimeIntervals": {
          "description": "ActiveTimeIntervals is a list of TimeInterval names when this route should be active.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "continue": {
          "description": "Boolean indicating whether an alert should continue matching subsequent sibling nodes. It will always be overridden to true for the first-level route by the Prometheus operator.",
          "type": "boolean"
        },
        "groupBy": {
          "description": "List of labels to group by. Labels must not be repeated (unique list). Special label \"...\" (aggregate by all possible labels), if provided, must be the only element in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "groupInterval": {
          "description": "How long to wait before sending an updated notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"5m\"",
          "type": "string"
        },
        "groupWait": {
          "description": "How long to wait before sending the initial notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"30s\"",
          "type": "string"
        },
        "matchers": {
          "description": "List of matchers that the alert's labels should match. For the first level route, the operator removes any existing equality and regexp matcher on the `namespace` label and adds a `namespace: \u003cobject namespace\u003e` matcher.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.Matcher",
            "default": {}
          },
          "type": "array"
        },
        "muteTimeIntervals": {
          "description": "Note: this comment applies to the field definition above but appears below otherwise it gets included in the generated manifest. CRD schema doesn't support self-referential types for now (see https://github.com/kubernetes/kubernetes/issues/62872). We have to use an alternative type to circumvent the limitation. The downside is that the Kube API can't validate the data beyond the fact that it is a valid JSON representation. MuteTimeIntervals is a list of TimeInterval names that will mute this route when matched.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "receiver": {
          "default": "",
          "description": "Name of the receiver for this route. If not empty, it should be listed in the `receivers` field.",
          "type": "string"
        },
        "repeatInterval": {
          "description": "How long to wait before repeating the last notification. Must match the regular expression`^(([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?$` Example: \"4h\"",
          "type": "string"
        },
        "routes": {
          "description": "Child routes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SNSConfig": {
      "additionalProperties": false,
      "description": "SNSConfig configures notifications via AWS SNS. See https://prometheus.io/docs/alerting/latest/configuration/#sns_configs",
      "properties": {
        "apiURL": {
          "description": "The SNS API URL i.e. https://sns.us-east-2.amazonaws.com. If not specified, the SNS API URL from the SNS SDK will be used.",
          "type": "string"
        },
        "attributes": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "SNS message attributes.",
          "type": "object"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "The message content of the SNS notification.",
          "type": "string"
        },
        "phoneNumber": {
          "description": "Phone number if message is delivered via SMS in E.164 format. If you don't specify this value, you must specify a value for the TopicARN or TargetARN.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "sigv4": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.Sigv4",
          "description": "Configures AWS's Signature Verification 4 signing process to sign requests."
        },
        "subject": {
          "description": "Subject line when the message is delivered to email endpoints.",
          "type": "string"
        },
        "targetARN": {
          "description": "The  mobile platform endpoint ARN if message is delivered via mobile notifications. If you don't specify this value, you must specify a value for the topic_arn or PhoneNumber.",
          "type": "string"
        },
        "topicARN": {
          "description": "SNS topic ARN, i.e. arn:aws:sns:us-east-2:698519295917:My-Topic If you don't specify this value, you must specify a value for the PhoneNumber or TargetARN.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector": {
      "additionalProperties": false,
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "default": "",
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of the secret in the object's namespace to select from.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "key"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackAction": {
      "additionalProperties": false,
      "description": "SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons for more information.",
      "properties": {
        "confirm": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfirmationField"
        },
        "name": {
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "text": {
          "default": "",
          "type": "string"
        },
        "type": {
          "default": "",
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "text"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfig": {
      "additionalProperties": false,
      "description": "SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config",
      "properties": {
        "actions": {
          "description": "A list of Slack actions that are sent with each notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackAction",
            "default": {}
          },
          "type": "array"
        },
        "apiURL": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the Slack webhook URL. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "callbackId": {
          "type": "string"
        },
        "channel": {
          "description": "The channel or user to send notifications to.",
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "fallback": {
          "type": "string"
        },
        "fields": {
          "description": "A list of Slack fields that are sent with each notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackField",
            "default": {}
          },
          "type": "array"
        },
        "footer": {
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "iconEmoji": {
          "type": "string"
        },
        "iconURL": {
          "type": "string"
        },
        "imageURL": {
          "type": "string"
        },
        "linkNames": {
          "type": "boolean"
        },
        "mrkdwnIn": {
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "pretext": {
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "shortFields": {
          "type": "boolean"
        },
        "text": {
          "type": "string"
        },
        "thumbURL": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "titleLink": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackConfirmationField": {
      "additionalProperties": false,
      "description": "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
      "properties": {
        "dismissText": {
          "type": "string"
        },
        "okText": {
          "type": "string"
        },
        "text": {
          "default": "",
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      },
      "required": [
        "text"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SlackField": {
      "additionalProperties": false,
      "description": "SlackField configures a single Slack field that is sent with each notification. Each field must contain a title, value, and optionally, a boolean value to indicate if the field is short enough to be displayed next to other fields designated as short. See https://api.slack.com/docs/message-attachments#fields for more information.",
      "properties": {
        "short": {
          "type": "boolean"
        },
        "title": {
          "default": "",
          "type": "string"
        },
        "value": {
          "default": "",
          "type": "string"
        }
      },
      "required": [
        "title",
        "value"
      ],
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TelegramConfig": {
      "additionalProperties": false,
      "description": "TelegramConfig configures notifications via Telegram. See https://prometheus.io/docs/alerting/latest/configuration/#telegram_config",
      "properties": {
        "apiURL": {
          "description": "The Telegram API URL i.e. https://api.telegram.org. If not specified, default API URL will be used.",
          "type": "string"
        },
        "botToken": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "Telegram bot token The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "chatID": {
          "description": "The Telegram chat ID.",
          "format": "int64",
          "type": "integer"
        },
        "disableNotifications": {
          "description": "Disable telegram notifications",
          "type": "boolean"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "Message template",
          "type": "string"
        },
        "parseMode": {
          "description": "Parse mode for telegram message",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether to notify about resolved alerts.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeInterval": {
      "additionalProperties": false,
      "description": "TimeInterval specifies the periods in time when notifications will be muted or active.",
      "properties": {
        "name": {
          "description": "Name of the time interval.",
          "type": "string"
        },
        "timeIntervals": {
          "description": "TimeIntervals is a list of TimePeriod.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimePeriod",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimePeriod": {
      "additionalProperties": false,
      "description": "TimePeriod describes periods of time.",
      "properties": {
        "daysOfMonth": {
          "description": "DaysOfMonth is a list of DayOfMonthRange",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.DayOfMonthRange",
            "default": {}
          },
          "type": "array"
        },
        "months": {
          "description": "Months is a list of MonthRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "times": {
          "description": "Times is a list of TimeRange",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeRange",
            "default": {}
          },
          "type": "array"
        },
        "weekdays": {
          "description": "Weekdays is a list of WeekdayRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "years": {
          "description": "Years is a list of YearRange",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.TimeRange": {
      "additionalProperties": false,
      "description": "TimeRange defines a start and end time in 24hr format",
      "properties": {
        "endTime": {
          "description": "EndTime is the end time in 24hr format.",
          "type": "string"
        },
        "startTime": {
          "description": "StartTime is the start time in 24hr format.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.VictorOpsConfig": {
      "additionalProperties": false,
      "description": "VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config",
      "properties": {
        "apiKey": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the API key to use when talking to the VictorOps API. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiUrl": {
          "description": "The VictorOps API URL.",
          "type": "string"
        },
        "customFields": {
          "description": "Additional custom fields for notification.",
          "items": {
            "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.KeyValue",
            "default": {}
          },
          "type": "array"
        },
        "entityDisplayName": {
          "description": "Contains summary of the alerted problem.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "The HTTP client's configuration."
        },
        "messageType": {
          "description": "Describes the behavior of the alert (CRITICAL, WARNING, INFO).",
          "type": "string"
        },
        "monitoringTool": {
          "description": "The monitoring tool the state message is from.",
          "type": "string"
        },
        "routingKey": {
          "default": "",
          "description": "A key used to map the alert to a team.",
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "stateMessage": {
          "description": "Contains long explanation of the alerted problem.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WeChatConfig": {
      "additionalProperties": false,
      "description": "WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config",
      "properties": {
        "agentID": {
          "type": "string"
        },
        "apiSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        },
        "apiURL": {
          "description": "The WeChat API URL.",
          "type": "string"
        },
        "corpID": {
          "description": "The corp id for authentication.",
          "type": "string"
        },
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "message": {
          "description": "API request data as defined by the WeChat API.",
          "type": "string"
        },
        "messageType": {
          "type": "string"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "toParty": {
          "type": "string"
        },
        "toTag": {
          "type": "string"
        },
        "toUser": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "com.coreos.monitoring.pkg.apis.monitoring.v1beta1.WebhookConfig": {
      "additionalProperties": false,
      "description": "WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config",
      "properties": {
        "httpConfig": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.HTTPConfig",
          "description": "HTTP client configuration."
        },
        "maxAlerts": {
          "description": "Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.",
          "format": "int32",
          "type": "integer"
        },
        "sendResolved": {
          "description": "Whether or not to notify about resolved alerts.",
          "type": "boolean"
        },
        "url": {
          "description": "The URL to send HTTP POST requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined.",
          "type": "string"
        },
        "urlSecret": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.SecretKeySelector",
          "description": "The secret's key that contains the webhook URL to send HTTP requests to. `urlSecret` takes precedence over `url`. One of `urlSecret` and `url` should be defined. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Persistent Disk resource in AWS.\n\nAn AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty).",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly value true will force the readOnly setting in VolumeMounts. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "additionalProperties": false,
      "description": "Affinity is a group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Describes node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "additionalProperties": false,
      "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "cachingMode is the Host Caching mode: None, Read Only, Read Write.",
          "type": "string"
        },
        "diskName": {
          "description": "diskName is the Name of the data disk in the blob storage",
          "type": "string"
        },
        "diskURI": {
          "description": "diskURI is the URI of data disk in the blob storage",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "kind": {
          "description": "kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "additionalProperties": false,
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the  name of secret that contains Azure Storage Account Name and Key",
          "type": "string"
        },
        "shareName": {
          "description": "shareName is the azure share Name",
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType to mount. Ex. \"ext4\", \"xfs\", \"ntfs\". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "nodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed."
        },
        "readOnly": {
          "description": "readOnly specifies a read-only configuration for the volume. Defaults to false (read/write).",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "volumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "additionalProperties": false,
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "monitors is Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "description": "path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "description": "secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volumeID used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "additionalProperties": false,
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.\n\nThe contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "additionalProperties": false,
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "additionalProperties": false,
      "description": "Adapts a ConfigMap into a projected volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "additionalProperties": false,
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "additionalProperties": false,
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The container image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The container image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\n",
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "name": {
          "description": "Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default \"0.0.0.0\" address inside a container will be accessible from the network. Modifying this array with strategic merge patch may corrupt the data. For more information See https://github.com/kubernetes/kubernetes/issues/108255. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "SecurityContext defines the security options the container should be run with. If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext. More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/"
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes"
        },
        "stdin": {
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.",
          "type": "boolean"
        },
        "stdinOnce": {
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "description": "Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\n",
          "type": "string"
        },
        "tty": {
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "additionalProperties": false,
      "description": "ContainerPort represents a network port in a single container.",
      "properties": {
        "containerPort": {
          "description": "Number of port to expose on the pod's IP address. This must be a valid port number, 0 \u003c x \u003c 65536.",
          "format": "int32",
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Number of port to expose on the host. If specified, this must be a valid port number, 0 \u003c x \u003c 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.",
          "format": "int32",
          "type": "integer"
        },
        "name": {
          "description": "If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.",
          "type": "string"
        },
        "protocol": {
          "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\n",
          "type": "string"
        }
      },
      "required": [
        "containerPort"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "additionalProperties": false,
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "additionalProperties": false,
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Required: Selects a field of the pod: only annotations, labels, name and namespace are supported."
        },
        "mode": {
          "description": "Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "additionalProperties": false,
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "description": "medium represents what type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "additionalProperties": false,
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "additionalProperties": false,
      "description": "EnvVar represents an environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "value": {
          "description": "Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. \"$$(VAR_NAME)\" will produce the string literal \"$(VAR_NAME)\". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to \"\".",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if value is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "additionalProperties": false,
      "description": "EnvVarSource represents a source for the value of an EnvVar.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['\u003cKEY\u003e']`, `metadata.annotations['\u003cKEY\u003e']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "volumeClaimTemplate": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
          "description": "Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `\u003cpod name\u003e-\u003cvolume name\u003e` where `\u003cvolume name\u003e` is the name from the `PodSpec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.\n\nRequired, must not be nil."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "additionalProperties": false,
      "description": "ExecAction describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "lun": {
          "description": "lun is Optional: FC target lun number",
          "format": "int32",
          "type": "integer"
        },
        "readOnly": {
          "description": "readOnly is Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "targetWWNs is Optional: FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "wwids Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "additionalProperties": false,
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "options is Optional: this field holds extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "description": "readOnly is Optional: defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is Optional: secretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "datasetName is Name of the dataset stored as metadata -\u003e name on the dataset for Flocker should be considered as deprecated",
          "type": "string"
        },
        "datasetUUID": {
          "description": "datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Persistent Disk resource in Google Compute Engine.\n\nA GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "partition": {
          "description": "partition is the partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as \"1\". Similarly, the volume partition for /dev/sda is \"0\" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "format": "int32",
          "type": "integer"
        },
        "pdName": {
          "description": "pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GRPCAction": {
      "additionalProperties": false,
      "properties": {
        "port": {
          "description": "Port number of the gRPC service. Number must be in the range 1 to 65535.",
          "format": "int32",
          "type": "integer"
        },
        "service": {
          "description": "Service is the name of the service to place in the gRPC HealthCheckRequest (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).\n\nIf this is not specified, the default behavior is defined by gRPC.",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.\n\nDEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "directory is the target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "repository is the URL",
          "type": "string"
        },
        "revision": {
          "description": "revision is the commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "endpoints is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "path": {
          "description": "path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "additionalProperties": false,
      "description": "HTTPGetAction describes an action based on HTTP Get requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set \"Host\" in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\n",
          "type": "string"
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "additionalProperties": false,
      "description": "HTTPHeader describes a custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name",
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        },
        "type": {
          "description": "type for HostPath Volume Defaults to \"\" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "chapAuthSession defines whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "initiatorName is the custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface \u003ctarget portal\u003e:\u003cvolume name\u003e will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "iqn is the target iSCSI Qualified Name.",
          "type": "string"
        },
        "iscsiInterface": {
          "description": "iscsiInterface is the interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "lun represents iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is the CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "additionalProperties": false,
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "description": "key is the key to project.",
          "type": "string"
        },
        "mode": {
          "description": "mode is Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "path": {
          "description": "path is the relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "additionalProperties": false,
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LifecycleHandler": {
      "additionalProperties": false,
      "description": "LifecycleHandler defines a specific action that should be taken in a lifecycle hook. One and only one of the fields, except TCPSocket must be specified.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "Deprecated. TCPSocket is NOT supported as a LifecycleHandler and kept for the backward compatibility. There are no validation of this field and lifecycle hooks will fail in runtime when tcp handler is specified."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "additionalProperties": false,
      "description": "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "boolean"
        },
        "server": {
          "description": "server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs",
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "additionalProperties": false,
      "description": "Node affinity is a group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "additionalProperties": false,
      "description": "A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "Required. A list of node selector terms. The terms are ORed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "additionalProperties": false,
      "description": "A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\n",
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "additionalProperties": false,
      "description": "A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector requirements by node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector requirements by node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "additionalProperties": false,
      "description": "ObjectFieldSelector selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "description": "Version of the schema the FieldPath is written in terms of, defaults to \"v1\".",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "type": "string"
        }
      },
      "required": [
        "fieldPath"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimCondition contails details about state of pvc",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "lastProbeTime is the time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "lastTransitionTime is the time the condition transitioned from one status to another."
        },
        "message": {
          "description": "message is the human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports \"ResizeStarted\" that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field."
        },
        "dataSourceRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef\n  allows any non-core object, as well as PersistentVolumeClaim objects.\n* While DataSource ignores disallowed values (dropping them), DataSourceRef\n  preserves all values, and generates an error if a disallowed value is\n  specified.\n(Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "selector is a label query over volumes to consider for binding."
        },
        "storageClassName": {
          "description": "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
          "type": "string"
        },
        "volumeMode": {
          "description": "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimStatus is the current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "allocatedResources": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "capacity represents the actual resources of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "phase represents the current phase of PersistentVolumeClaim.\n\n",
          "type": "string"
        },
        "resizeStatus": {
          "description": "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta",
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "additionalProperties": false,
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Will force the ReadOnly setting in VolumeMounts. Default false.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Photon Controller persistent disk resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "pdID": {
          "description": "pdID is the ID that identifies Photon Controller persistent disk",
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "additionalProperties": false,
      "description": "Pod affinity is a group of inter pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "additionalProperties": false,
      "description": "Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key \u003ctopologyKey\u003e matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over the set of namespaces that the term applies to. The term is applied to the union of the namespaces selected by this field and the ones listed in the namespaces field. null selector and null or empty namespaces list means \"this pod's namespace\". An empty selector ({}) matches all namespaces."
        },
        "namespaces": {
          "description": "namespaces specifies a static list of namespace names that the term applies to. The term is applied to the union of the namespaces listed in this field and the ones selected by namespaceSelector. null or empty namespaces list and null namespaceSelector means \"this pod's namespace\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "additionalProperties": false,
      "description": "Pod anti affinity is a group of inter pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "additionalProperties": false,
      "description": "PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
          "type": "string"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "additionalProperties": false,
      "description": "PortworxVolumeSource represents a Portworx volume resource.",
      "properties": {
        "fsType": {
          "description": "fSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "volumeID uniquely identifies a Portworx volume",
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "additionalProperties": false,
      "description": "An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "additionalProperties": false,
      "description": "Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "Exec specifies the action to take."
        },
        "failureThreshold": {
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "grpc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction",
          "description": "GRPC specifies an action involving a GRPC port. This is a beta field and requires enabling GRPCContainerProbe feature gate."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "HTTPGet specifies the http request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        },
        "periodSeconds": {
          "description": "How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "successThreshold": {
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.",
          "format": "int32",
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port."
        },
        "terminationGracePeriodSeconds": {
          "description": "Optional duration in seconds the pod needs to terminate gracefully upon probe failure. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this value overrides the value provided by the pod spec. Value must be non-negative integer. The value zero indicates stop immediately via the kill signal (no opportunity to shut down). This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate. Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.",
          "format": "int64",
          "type": "integer"
        },
        "timeoutSeconds": {
          "description": "Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "defaultMode are the mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "sources": {
          "description": "sources is the list of volume projections",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "group to map volume access to Default is no group",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.",
          "type": "boolean"
        },
        "registry": {
          "description": "registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes",
          "type": "string"
        },
        "tenant": {
          "description": "tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "type": "string"
        },
        "user": {
          "description": "user to map volume access to Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "volume is a string that references an already created Quobyte volume by name.",
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd",
          "type": "string"
        },
        "image": {
          "description": "image is the rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "keyring": {
          "description": "keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "monitors": {
          "description": "monitors is a collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "description": "pool is the rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it"
        },
        "user": {
          "description": "user is the rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "additionalProperties": false,
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Specifies the output format of the exposed resources, defaults to \"1\""
        },
        "resource": {
          "description": "Required: resource to select",
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "additionalProperties": false,
      "description": "ResourceRequirements describes the compute resource requirements.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "additionalProperties": false,
      "description": "SELinuxOptions are the labels to be applied to the container",
      "properties": {
        "level": {
          "description": "Level is SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "Role is a SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "Type is a SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "User is a SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "additionalProperties": false,
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Default is \"xfs\".",
          "type": "string"
        },
        "gateway": {
          "description": "gateway is the host address of the ScaleIO API Gateway.",
          "type": "string"
        },
        "protectionDomain": {
          "description": "protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "description": "sslEnabled Flag enable/disable SSL communication with Gateway, default false",
          "type": "boolean"
        },
        "storageMode": {
          "description": "storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.",
          "type": "string"
        },
        "storagePool": {
          "description": "storagePool is the ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "system is the name of the storage system as configured in ScaleIO.",
          "type": "string"
        },
        "volumeName": {
          "description": "volumeName is the name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "additionalProperties": false,
      "description": "SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.",
      "properties": {
        "localhostProfile": {
          "description": "localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is \"Localhost\".",
          "type": "string"
        },
        "type": {
          "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\n",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "additionalProperties": false,
      "description": "SecretEnvSource selects a Secret to populate the environment variables with.\n\nThe contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "additionalProperties": false,
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the secret to select from.  Must be a valid secret key.",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "additionalProperties": false,
      "description": "Adapts a secret into a projected volume.\n\nThe contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "items if unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "additionalProperties": false,
      "description": "Adapts a Secret into a volume.\n\nThe contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "defaultMode is Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "items If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "optional field specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "secretName is the name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "additionalProperties": false,
      "description": "SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
        },
        "privileged": {
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod \u0026 container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "additionalProperties": false,
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "description": "expirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "type": "integer"
        },
        "path": {
          "description": "path is the path relative to the mount point of the file to project the token into.",
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is the filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "description": "readOnly defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "secretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "volumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "volumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to \"default\" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "additionalProperties": false,
      "description": "Sysctl defines a kernel parameter to be set",
      "properties": {
        "name": {
          "description": "Name of a property to set",
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "additionalProperties": false,
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Optional: Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "additionalProperties": false,
      "description": "The pod this Toleration is attached to tolerates any taint that matches the triple \u003ckey,value,effect\u003e using the matching operator \u003coperator\u003e.",
      "properties": {
        "effect": {
          "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\n",
          "type": "string"
        },
        "key": {
          "description": "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
          "type": "string"
        },
        "operator": {
          "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\n",
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "additionalProperties": false,
      "description": "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain."
        },
        "matchLabelKeys": {
          "description": "MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "maxSkew": {
          "description": "MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.",
          "format": "int32",
          "type": "integer"
        },
        "minDomains": {
          "description": "MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.\n\nFor example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.\n\nThis is a beta field and requires the MinDomainsInPodTopologySpread feature gate to be enabled (enabled by default).",
          "format": "int32",
          "type": "integer"
        },
        "nodeAffinityPolicy": {
          "description": "NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.\n\nIf this value is nil, the behavior is equivalent to the Honor policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
          "type": "string"
        },
        "nodeTaintsPolicy": {
          "description": "NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.\n\nIf this value is nil, the behavior is equivalent to the Ignore policy. This is a alpha-level feature enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.",
          "type": "string"
        },
        "topologyKey": {
          "description": "TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each \u003ckey, value\u003e as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\n",
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "additionalProperties": false,
      "description": "TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the type of resource being referenced",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of resource being referenced",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.api.core.v1.Volume": {
      "additionalProperties": false,
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "awsElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "azureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "cephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "configMap represents a configMap that should populate this volume"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "downwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "emptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "ephemeral": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
          "description": "ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "flexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "gcePersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "gitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "hostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "iscsi represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md"
        },
        "name": {
          "description": "name of the volume. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "nfs represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "persistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "portworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "projected items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "rbd represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "additionalProperties": false,
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to.",
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod",
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "additionalProperties": false,
      "description": "VolumeMount describes a mounting of a Volume within a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'.",
          "type": "string"
        },
        "mountPropagation": {
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
          "type": "string"
        },
        "name": {
          "description": "This must match the Name of a Volume.",
          "type": "string"
        },
        "readOnly": {
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "description": "Path within the volume from which the container's volume should be mounted. Defaults to \"\" (volume's root).",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to \"\" (volume's root). SubPathExpr and SubPath are mutually exclusive.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "additionalProperties": false,
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "configMap information about the configMap data to project"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "downwardAPI information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "secret information about the secret data to project"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "serviceAccountToken is information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "additionalProperties": false,
      "description": "Represents a vSphere volume resource.",
      "properties": {
        "fsType": {
          "description": "fsType is filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "storagePolicyName is the storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "volumePath is the path that identifies vSphere volume vmdk",
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "additionalProperties": false,
      "description": "The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "weight associated with matching the corresponding podAffinityTerm, in the range 1-100.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "podAffinityTerm"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "additionalProperties": false,
      "description": "WindowsSecurityContextOptions contain Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "GMSACredentialSpecName is the name of the GMSA credential spec to use.",
          "type": "string"
        },
        "hostProcess": {
          "description": "HostProcess determines if a container should be run as a 'Host Process' container. This field is alpha-level and will only be honored by components that enable the WindowsHostProcessContainers feature flag. Setting this field without the feature flag will result in errors when validating the Pod. All of a Pod's containers must have the same effective HostProcess value (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).  In addition, if HostProcess is true then HostNetwork must also be set to true.",
          "type": "boolean"
        },
        "runAsUserName": {
          "description": "The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil."
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:\u003cname\u003e', where \u003cname\u003e is the name of a field in a struct, or key in a map 'v:\u003cvalue\u003e', where \u003cvalue\u003e is the exact json formatted value of a list item 'i:\u003cindex\u003e', where \u003cindex\u003e is position of a item in a list 'k:\u003ckeys\u003e', where \u003ckeys\u003e is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "additionalProperties": false,
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement",
            "default": {}
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "additionalProperties": false,
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "default": "",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "additionalProperties": false,
      "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
        },
        "manager": {
          "description": "Manager is an identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
          "type": "string"
        },
        "subresource": {
          "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "default": {},
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "managedFields": {
          "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry",
            "default": {}
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "additionalProperties": false,
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "default": "",
          "description": "API version of the referent.",
          "type": "string"
        },
        "blockOwnerDeletion": {
          "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "default": "",
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "uid": {
          "default": "",
          "description": "UID of the referent. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "oneOf": [
        {
          "type": "string"
        },
        {
          "type": "integer"
        }
      ]
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Alertmanager": {
      "additionalProperties": false,
      "description": "Alertmanager describes an Alertmanager cluster.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.AlertmanagerSpec",
          "default": {},
          "description": "Specification of the desired behavior of the Alertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor": {
      "additionalProperties": false,
      "description": "PodMonitor defines monitoring for a set of pods.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitorSpec",
          "default": {},
          "description": "Specification of desired Pod selection for target discovery by Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Probe": {
      "additionalProperties": false,
      "description": "Probe defines monitoring for a set of static targets or ingresses.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ProbeSpec",
          "default": {},
          "description": "Specification of desired Ingress selection for target discovery by Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Prometheus": {
      "additionalProperties": false,
      "description": "Prometheus defines a Prometheus deployment.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusSpec",
          "default": {},
          "description": "Specification of the desired behavior of the Prometheus cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule": {
      "additionalProperties": false,
      "description": "PrometheusRule defines recording and alerting rules for a Prometheus instance",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRuleSpec",
          "default": {},
          "description": "Specification of desired alerting rule definitions for Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ServiceMonitor": {
      "additionalProperties": false,
      "description": "ServiceMonitor defines monitoring for a set of services.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ServiceMonitorSpec",
          "default": {},
          "description": "Specification of desired Service selection for target discovery by Prometheus."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosRuler": {
      "additionalProperties": false,
      "description": "ThanosRuler defines a ThanosRuler deployment.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosRulerSpec",
          "default": {},
          "description": "Specification of the desired behavior of the ThanosRuler cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig": {
      "additionalProperties": false,
      "description": "AlertmanagerConfig defines a namespaced AlertmanagerConfig to be aggregated across multiple namespaces configuring one Alertmanager cluster.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfigSpec",
          "default": {}
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.meta.v1.ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object"
        },
        "checksums": {
          "$ref": "#/definitions/metachart.interface.checksums"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        }
      },
      "type": "object"
    },
    "metachart.interface.FQDNitem": {
      "pattern": "^[a-z][0-9a-z]*(-[0-9a-z]+)*$",
      "type": "string"
    },
    "metachart.interface.boolean": {
      "type": "boolean"
    },
    "metachart.interface.checksumEntryList": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/definitions/metachart.interface.FQDNitem"
          },
          "type": "array"
        },
        {
          "enum": [
            "*"
          ]
        }
      ]
    },
    "metachart.interface.checksums": {
      "properties": {
        "alertmanagerconfigs": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "alertmanagers": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "podmonitors": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "probes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "prometheuses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "prometheusrules": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "servicemonitors": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "thanosrulers": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "alertmanagerconfigs": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig"
        }
      },
      "type": "object"
    },
    "alertmanagers": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Alertmanager"
        }
      },
      "type": "object"
    },
    "context": {
      "description": "Any content which can be used for config rendering without schema defined by the chart",
      "type": "object"
    },
    "fullnameOverride": {
      "anyOf": [
        {
          "$ref": "#/definitions/metachart.interface.FQDNitem"
        },
        {
          "type": "null"
        }
      ]
    },
    "podmonitors": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
        }
      },
      "type": "object"
    },
    "probes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Probe"
        }
      },
      "type": "object"
    },
    "prometheuses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Prometheus"
        }
      },
      "type": "object"
    },
    "prometheusrules": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule"
        }
      },
      "type": "object"
    },
    "servicemonitors": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ServiceMonitor"
        }
      },
      "type": "object"
    },
    "settings": {
      "additionalProperties": false,
      "properties": {
        "alertmanagerconfigs": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1beta1.AlertmanagerConfig"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "alertmanagers": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Alertmanager"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "global": {
          "additionalProperties": false,
          "properties": {
            "annotations": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "podmonitors": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PodMonitor"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "probes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Probe"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "prometheuses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.Prometheus"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "prometheusrules": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.PrometheusRule"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "servicemonitors": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ServiceMonitor"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "thanosrulers": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosRuler"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "thanosrulers": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.com.coreos.monitoring.pkg.apis.monitoring.v1.ThanosRuler"
        }
      },
      "type": "object"
    }
  }
}