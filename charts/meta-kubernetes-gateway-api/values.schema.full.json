{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "definitions": {
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "additionalProperties": false,
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "matchLabels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "additionalProperties": false,
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "default": "",
          "description": "key is the label key that the selector applies to.",
          "type": "string"
        },
        "operator": {
          "default": "",
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.AllowedRoutes": {
      "additionalProperties": false,
      "description": "AllowedRoutes defines which Routes may be attached to this Listener.",
      "properties": {
        "kinds": {
          "description": "Kinds specifies the groups and kinds of Routes that are allowed to bind to this Gateway Listener. When unspecified or empty, the kinds of Routes selected are determined using the Listener protocol.\n\nA RouteGroupKind MUST correspond to kinds of Routes that are compatible with the application protocol specified in the Listener's Protocol field. If an implementation does not support or recognize this resource type, it MUST set the \"ResolvedRefs\" condition to False for this Listener with the \"InvalidRouteKinds\" reason.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.RouteGroupKind",
            "default": {}
          },
          "type": "array"
        },
        "namespaces": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.RouteNamespaces",
          "description": "Namespaces indicates namespaces from which Routes may be attached to this Listener. This is restricted to the namespace of this Gateway by default.\n\nSupport: Core"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.BackendObjectReference": {
      "additionalProperties": false,
      "description": "BackendObjectReference defines how an ObjectReference that is specific to BackendRef. It includes a few additional fields and features than a regular ObjectReference.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nThe API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.\n\nReferences to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.",
      "properties": {
        "group": {
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the Kubernetes resource kind of the referent. For example \"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "description": "Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.BackendRef": {
      "additionalProperties": false,
      "description": "BackendRef defines how a Route should forward a request to a Kubernetes resource.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.",
      "properties": {
        "group": {
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the Kubernetes resource kind of the referent. For example \"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "description": "Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.",
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "description": "Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.\n\nIf only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.\n\nSupport for this field varies based on the context where used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.CookieConfig": {
      "additionalProperties": false,
      "description": "CookieConfig defines the configuration for cookie-based session persistence.",
      "properties": {
        "lifetimeType": {
          "description": "LifetimeType specifies whether the cookie has a permanent or session-based lifetime. A permanent cookie persists until its specified expiry time, defined by the Expires or Max-Age cookie attributes, while a session cookie is deleted when the current session ends.\n\nWhen set to \"Permanent\", AbsoluteTimeout indicates the cookie's lifetime via the Expires or Max-Age cookie attributes and is required.\n\nWhen set to \"Session\", AbsoluteTimeout indicates the absolute lifetime of the cookie tracked by the gateway and is optional.\n\nSupport: Core for \"Session\" type\n\nSupport: Extended for \"Permanent\" type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.FrontendTLSValidation": {
      "additionalProperties": false,
      "description": "FrontendTLSValidation holds configuration information that can be used to validate the frontend initiating the TLS connection",
      "properties": {
        "caCertificateRefs": {
          "description": "CACertificateRefs contains one or more references to Kubernetes objects that contain TLS certificates of the Certificate Authorities that can be used as a trust anchor to validate the certificates presented by the client.\n\nA single CA certificate reference to a Kubernetes ConfigMap has \"Core\" support. Implementations MAY choose to support attaching multiple CA certificates to a Listener, but this behavior is implementation-specific.\n\nSupport: Core - A single reference to a Kubernetes ConfigMap with the CA certificate in a key named `ca.crt`.\n\nSupport: Implementation-specific (More than one reference, or other kinds of resources).\n\nReferences to a resource in a different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \"ResolvedRefs\" condition MUST be set to False for this listener with the \"RefNotPermitted\" reason.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ObjectReference",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCBackendRef": {
      "additionalProperties": false,
      "description": "GRPCBackendRef defines how a GRPCRoute forwards a gRPC request.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\n\u003cgateway:experimental:description\u003e\n\nWhen the BackendRef points to a Kubernetes Service, implementations SHOULD honor the appProtocol field if it is set for the target Service Port.\n\nImplementations supporting appProtocol SHOULD recognize the Kubernetes Standard Application Protocols defined in KEP-3726.\n\nIf a Service appProtocol isn't specified, an implementation MAY infer the backend protocol through its own means. Implementations MAY infer the protocol from the Route type referring to the backend Service.\n\nIf a Route is not able to send traffic to the backend using the specified protocol then the backend is considered invalid. Implementations MUST set the \"ResolvedRefs\" condition to \"False\" with the \"UnsupportedProtocol\" reason.\n\n\u003c/gateway:experimental:description\u003e",
      "properties": {
        "filters": {
          "description": "Filters defined at this level MUST be executed if and only if the request is being forwarded to the backend defined here.\n\nSupport: Implementation-specific (For broader support of filters, use the Filters field in GRPCRouteRule.)",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCRouteFilter",
            "default": {}
          },
          "type": "array"
        },
        "group": {
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the Kubernetes resource kind of the referent. For example \"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "description": "Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.",
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "description": "Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.\n\nIf only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.\n\nSupport for this field varies based on the context where used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCHeaderMatch": {
      "additionalProperties": false,
      "description": "GRPCHeaderMatch describes how to select a gRPC route by matching gRPC request headers.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the gRPC Header to be matched.\n\nIf multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \"foo\" and \"Foo\" are considered equivalent.",
          "type": "string"
        },
        "type": {
          "description": "Type specifies how to match against the value of the header.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value is the value of the gRPC Header to be matched.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCMethodMatch": {
      "additionalProperties": false,
      "description": "GRPCMethodMatch describes how to select a gRPC route by matching the gRPC request service and/or method.\n\nAt least one of Service and Method MUST be a non-empty string.",
      "properties": {
        "method": {
          "description": "Value of the method to match against. If left empty or omitted, will match all services.\n\nAt least one of Service and Method MUST be a non-empty string.",
          "type": "string"
        },
        "service": {
          "description": "Value of the service to match against. If left empty or omitted, will match any service.\n\nAt least one of Service and Method MUST be a non-empty string.",
          "type": "string"
        },
        "type": {
          "description": "Type specifies how to match against the service and/or method. Support: Core (Exact with service and method specified)\n\nSupport: Implementation-specific (Exact with method specified but no service specified)\n\nSupport: Implementation-specific (RegularExpression)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCRouteFilter": {
      "additionalProperties": false,
      "description": "GRPCRouteFilter defines processing steps that must be completed during the request or response lifecycle. GRPCRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.",
      "properties": {
        "extensionRef": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.LocalObjectReference",
          "description": "ExtensionRef is an optional, implementation-specific extension to the \"filter\" behavior.  For example, resource \"myroutefilter\" in group \"networking.example.net\"). ExtensionRef MUST NOT be used for core and extended filters.\n\nSupport: Implementation-specific\n\nThis filter can be used multiple times within the same rule."
        },
        "requestHeaderModifier": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderFilter",
          "description": "RequestHeaderModifier defines a schema for a filter that modifies request headers.\n\nSupport: Core"
        },
        "requestMirror": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRequestMirrorFilter",
          "description": "RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.\n\nThis filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends.\n\nSupport: Extended"
        },
        "responseHeaderModifier": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderFilter",
          "description": "ResponseHeaderModifier defines a schema for a filter that modifies response headers.\n\nSupport: Extended"
        },
        "type": {
          "default": "",
          "description": "Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:\n\n- Core: Filter types and their corresponding configuration defined by\n  \"Support: Core\" in this package, e.g. \"RequestHeaderModifier\". All\n  implementations supporting GRPCRoute MUST support core filters.\n\n- Extended: Filter types and their corresponding configuration defined by\n  \"Support: Extended\" in this package, e.g. \"RequestMirror\". Implementers\n  are encouraged to support extended filters.\n\n- Implementation-specific: Filters that are defined and supported by specific vendors.\n  In the future, filters showing convergence in behavior across multiple\n  implementations will be considered for inclusion in extended or core\n  conformance levels. Filter-specific configuration for such filters\n  is specified using the ExtensionRef field. `Type` MUST be set to\n  \"ExtensionRef\" for custom filters.\n\nImplementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.\n\nIf a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.\n\n\u003cgateway:experimental:validation:Enum=ResponseHeaderModifier;RequestHeaderModifier;RequestMirror;ExtensionRef\u003e",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCRouteMatch": {
      "additionalProperties": false,
      "description": "GRPCRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied.\n\nFor example, the match below will match a gRPC request only if its service is `foo` AND it contains the `version: v1` header:\n\n``` matches:\n  - method:\n    type: Exact\n    service: \"foo\"\n    headers:\n  - name: \"version\"\n    value \"v1\"\n\n```",
      "properties": {
        "headers": {
          "description": "Headers specifies gRPC request header matchers. Multiple match values are ANDed together, meaning, a request MUST match all the specified headers to select the route.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCHeaderMatch",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "method": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCMethodMatch",
          "description": "Method specifies a gRPC request service/method matcher. If this field is not specified, all services and methods will match."
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCRouteRule": {
      "additionalProperties": false,
      "description": "GRPCRouteRule defines the semantics for matching a gRPC request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).",
      "properties": {
        "backendRefs": {
          "description": "BackendRefs defines the backend(s) where matching requests should be sent.\n\nFailure behavior here depends on how many BackendRefs are specified and how many are invalid.\n\nIf *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive an `UNAVAILABLE` status.\n\nSee the GRPCBackendRef definition for the rules about what makes a single GRPCBackendRef invalid.\n\nWhen a GRPCBackendRef is invalid, `UNAVAILABLE` statuses MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive an `UNAVAILABLE` status.\n\nFor example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic MUST receive an `UNAVAILABLE` status. Implementations may choose how that 50 percent is determined.\n\nSupport: Core for Kubernetes Service\n\nSupport: Implementation-specific for any other resource\n\nSupport for weight: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCBackendRef",
            "default": {}
          },
          "type": "array"
        },
        "filters": {
          "description": "Filters define the filters that are applied to requests that match this rule.\n\nThe effects of ordering of multiple behaviors are currently unspecified. This can change in the future based on feedback during the alpha stage.\n\nConformance-levels at this level are defined based on the type of filter:\n\n- ALL core filters MUST be supported by all implementations that support\n  GRPCRoute.\n- Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across\n  implementations.\n\nSpecifying the same filter multiple times is not supported unless explicitly indicated in the filter.\n\nIf an implementation can not support a combination of filters, it must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCRouteFilter",
            "default": {}
          },
          "type": "array"
        },
        "matches": {
          "description": "Matches define conditions used for matching the rule against incoming gRPC requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.\n\nFor example, take the following matches configuration:\n\n``` matches: - method:\n    service: foo.bar\n  headers:\n    values:\n      version: 2\n- method:\n    service: foo.bar.v2\n```\n\nFor a request to match against this rule, it MUST satisfy EITHER of the two conditions:\n\n- service of foo.bar AND contains the header `version: 2` - service of foo.bar.v2\n\nSee the documentation for GRPCRouteMatch on how to specify multiple match conditions to be ANDed together.\n\nIf no matches are specified, the implementation MUST match every gRPC request.\n\nProxy or Load Balancer routing configuration generated from GRPCRoutes MUST prioritize rules based on the following criteria, continuing on ties. Merging MUST not be done between GRPCRoutes and HTTPRoutes. Precedence MUST be given to the rule with the largest number of:\n\n* Characters in a matching non-wildcard hostname. * Characters in a matching hostname. * Characters in a matching service. * Characters in a matching method. * Header matches.\n\nIf ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:\n\n* The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by\n  \"{namespace}/{name}\".\n\nIf ties still exist within the Route that has been given precedence, matching precedence MUST be granted to the first matching rule meeting the above criteria.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCRouteMatch",
            "default": {}
          },
          "type": "array"
        },
        "sessionPersistence": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.SessionPersistence",
          "description": "SessionPersistence defines and configures session persistence for the route rule.\n\nSupport: Extended\n\n\u003cgateway:experimental\u003e"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GRPCRouteSpec": {
      "additionalProperties": false,
      "description": "GRPCRouteSpec defines the desired state of GRPCRoute",
      "properties": {
        "hostnames": {
          "description": "Hostnames defines a set of hostnames to match against the GRPC Host header to select a GRPCRoute to process the request. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:\n\n1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard\n   label MUST appear by itself as the first label.\n\nIf a hostname is specified by both the Listener and GRPCRoute, there MUST be at least one intersecting hostname for the GRPCRoute to be attached to the Listener. For example:\n\n* A Listener with `test.example.com` as the hostname matches GRPCRoutes\n  that have either not specified any hostnames, or have specified at\n  least one of `test.example.com` or `*.example.com`.\n* A Listener with `*.example.com` as the hostname matches GRPCRoutes\n  that have either not specified any hostnames or have specified at least\n  one hostname that matches the Listener hostname. For example,\n  `test.example.com` and `*.example.com` would both match. On the other\n  hand, `example.com` and `test.example.net` would not match.\n\nHostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.\n\nIf both the Listener and GRPCRoute have specified hostnames, any GRPCRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the GRPCRoute specified `test.example.com` and `test.example.net`, `test.example.net` MUST NOT be considered for a match.\n\nIf both the Listener and GRPCRoute have specified hostnames, and none match with the criteria above, then the GRPCRoute MUST NOT be accepted by the implementation. The implementation MUST raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.\n\nIf a Route (A) of type HTTPRoute or GRPCRoute is attached to a Listener and that listener already has another Route (B) of the other type attached and the intersection of the hostnames of A and B is non-empty, then the implementation MUST accept exactly one of these two routes, determined by the following criteria, in order:\n\n* The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by\n  \"{namespace}/{name}\".\n\nThe rejected Route MUST raise an 'Accepted' condition with a status of 'False' in the corresponding RouteParentStatus.\n\nSupport: Core",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "parentRefs": {
          "description": "ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \"producer\" route, or the mesh implementation must support and allow \"consumer\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \"producer\" route for a Service in a different namespace from the Route.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nThis API may be extended in the future to support additional kinds of parent resources.\n\nParentRefs must be _distinct_. This means either that:\n\n* They select different objects.  If this is the case, then parentRef\n  entries are distinct. In terms of fields, this means that the\n  multi-part key defined by `group`, `kind`, `namespace`, and `name` must\n  be unique across all parentRef entries in the Route.\n* They do not select different objects, but for each optional field used,\n  each ParentRef that selects the same object must set the same set of\n  optional fields to different values. If one ParentRef sets a\n  combination of optional fields, all must set the same combination.\n\nSome examples:\n\n* If one ParentRef sets `sectionName`, all ParentRefs referencing the\n  same object must also set `sectionName`.\n* If one ParentRef sets `port`, all ParentRefs referencing the same\n  object must also set `port`.\n* If one ParentRef sets `sectionName` and `port`, all ParentRefs\n  referencing the same object must also set `sectionName` and `port`.\n\nIt is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.\n\nNote that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\n\u003cgateway:standard:validation:XValidation:message=\"sectionName must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))\"\u003e \u003cgateway:standard:validation:XValidation:message=\"sectionName must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName))))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') \u0026\u0026 (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName)) \u0026\u0026 (((!has(p1.port) || p1.port == 0) \u0026\u0026 (!has(p2.port) || p2.port == 0)) || (has(p1.port) \u0026\u0026 has(p2.port) \u0026\u0026 p1.port == p2.port))))\"\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParentReference",
            "default": {}
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules are a list of GRPC matchers, filters and actions.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCRouteRule",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GatewayAddress": {
      "additionalProperties": false,
      "description": "GatewayAddress describes an address that can be bound to a Gateway.",
      "properties": {
        "type": {
          "description": "Type of the address.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value of the address. The validity of the values will depend on the type and support by the controller.\n\nExamples: `1.2.3.4`, `128::1`, `my-ip-address`.",
          "type": "string"
        }
      },
      "required": [
        "value"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GatewayClassSpec": {
      "additionalProperties": false,
      "description": "GatewayClassSpec reflects the configuration of a class of Gateways.",
      "properties": {
        "controllerName": {
          "default": "",
          "description": "ControllerName is the name of the controller that is managing Gateways of this class. The value of this field MUST be a domain prefixed path.\n\nExample: \"example.net/gateway-controller\".\n\nThis field is not mutable and cannot be empty.\n\nSupport: Core",
          "type": "string"
        },
        "description": {
          "description": "Description helps describe a GatewayClass with more details.",
          "type": "string"
        },
        "parametersRef": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParametersReference",
          "description": "ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the GatewayClass. This is optional if the controller does not require any additional configuration.\n\nParametersRef can reference a standard Kubernetes resource, i.e. ConfigMap, or an implementation-specific custom resource. The resource can be cluster-scoped or namespace-scoped.\n\nIf the referent cannot be found, the GatewayClass's \"InvalidParameters\" status condition will be true.\n\nA Gateway for this GatewayClass may provide its own `parametersRef`. When both are specified, the merging behavior is implementation specific. It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.\n\nSupport: Implementation-specific"
        }
      },
      "required": [
        "controllerName"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GatewayInfrastructure": {
      "additionalProperties": false,
      "description": "GatewayInfrastructure defines infrastructure level attributes about a Gateway instance.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations that SHOULD be applied to any resources created in response to this Gateway.\n\nFor implementations creating other Kubernetes objects, this should be the `metadata.annotations` field on resources. For other implementations, this refers to any relevant (implementation specific) \"annotations\" concepts.\n\nAn implementation may chose to add additional implementation-specific annotations as they see fit.\n\nSupport: Extended",
          "type": "object"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Labels that SHOULD be applied to any resources created in response to this Gateway.\n\nFor implementations creating other Kubernetes objects, this should be the `metadata.labels` field on resources. For other implementations, this refers to any relevant (implementation specific) \"labels\" concepts.\n\nAn implementation may chose to add additional implementation-specific labels as they see fit.\n\nSupport: Extended",
          "type": "object"
        },
        "parametersRef": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.LocalParametersReference",
          "description": "ParametersRef is a reference to a resource that contains the configuration parameters corresponding to the Gateway. This is optional if the controller does not require any additional configuration.\n\nThis follows the same semantics as GatewayClass's `parametersRef`, but on a per-Gateway basis\n\nThe Gateway's GatewayClass may provide its own `parametersRef`. When both are specified, the merging behavior is implementation specific. It is generally recommended that GatewayClass provides defaults that can be overridden by a Gateway.\n\nSupport: Implementation-specific"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GatewaySpec": {
      "additionalProperties": false,
      "description": "GatewaySpec defines the desired state of Gateway.\n\nNot all possible combinations of options specified in the Spec are valid. Some invalid configurations can be caught synchronously via CRD validation, but there are many cases that will require asynchronous signaling via the GatewayStatus block.",
      "properties": {
        "addresses": {
          "description": "Addresses requested for this Gateway. This is optional and behavior can depend on the implementation. If a value is set in the spec and the requested address is invalid or unavailable, the implementation MUST indicate this in the associated entry in GatewayStatus.Addresses.\n\nThe Addresses field represents a request for the address(es) on the \"outside of the Gateway\", that traffic bound for this Gateway will use. This could be the IP address or hostname of an external load balancer or other networking infrastructure, or some other address that traffic will be sent to.\n\nIf no Addresses are specified, the implementation MAY schedule the Gateway in an implementation-specific manner, assigning an appropriate set of Addresses.\n\nThe implementation MUST bind all Listeners to every GatewayAddress that it assigns to the Gateway and add a corresponding entry in GatewayStatus.Addresses.\n\nSupport: Extended\n\n\u003cgateway:validateIPAddress\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GatewayAddress",
            "default": {}
          },
          "type": "array"
        },
        "gatewayClassName": {
          "default": "",
          "description": "GatewayClassName used for this Gateway. This is the name of a GatewayClass resource.",
          "type": "string"
        },
        "infrastructure": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GatewayInfrastructure",
          "description": "Infrastructure defines infrastructure level attributes about this Gateway instance.\n\nSupport: Core\n\n\u003cgateway:experimental\u003e"
        },
        "listeners": {
          "description": "Listeners associated with this Gateway. Listeners define logical endpoints that are bound on this Gateway's addresses. At least one Listener MUST be specified.\n\nEach Listener in a set of Listeners (for example, in a single Gateway) MUST be _distinct_, in that a traffic flow MUST be able to be assigned to exactly one listener. (This section uses \"set of Listeners\" rather than \"Listeners in a single Gateway\" because implementations MAY merge configuration from multiple Gateways onto a single data plane, and these rules _also_ apply in that case).\n\nPractically, this means that each listener in a set MUST have a unique combination of Port, Protocol, and, if supported by the protocol, Hostname.\n\nSome combinations of port, protocol, and TLS settings are considered Core support and MUST be supported by implementations based on their targeted conformance profile:\n\nHTTP Profile\n\n1. HTTPRoute, Port: 80, Protocol: HTTP 2. HTTPRoute, Port: 443, Protocol: HTTPS, TLS Mode: Terminate, TLS keypair provided\n\nTLS Profile\n\n1. TLSRoute, Port: 443, Protocol: TLS, TLS Mode: Passthrough\n\n\"Distinct\" Listeners have the following property:\n\nThe implementation can match inbound requests to a single distinct Listener. When multiple Listeners share values for fields (for example, two Listeners with the same Port value), the implementation can match requests to only one of the Listeners using other Listener fields.\n\nFor example, the following Listener scenarios are distinct:\n\n1. Multiple Listeners with the same Port that all use the \"HTTP\"\n   Protocol that all have unique Hostname values.\n2. Multiple Listeners with the same Port that use either the \"HTTPS\" or\n   \"TLS\" Protocol that all have unique Hostname values.\n3. A mixture of \"TCP\" and \"UDP\" Protocol Listeners, where no Listener\n   with the same Protocol has the same Port value.\n\nSome fields in the Listener struct have possible values that affect whether the Listener is distinct. Hostname is particularly relevant for HTTP or HTTPS protocols.\n\nWhen using the Hostname value to select between same-Port, same-Protocol Listeners, the Hostname value must be different on each Listener for the Listener to be distinct.\n\nWhen the Listeners are distinct based on Hostname, inbound request hostnames MUST match from the most specific to least specific Hostname values to choose the correct Listener and its associated set of Routes.\n\nExact matches must be processed before wildcard matches, and wildcard matches must be processed before fallback (empty Hostname value) matches. For example, `\"foo.example.com\"` takes precedence over `\"*.example.com\"`, and `\"*.example.com\"` takes precedence over `\"\"`.\n\nAdditionally, if there are multiple wildcard entries, more specific wildcard entries must be processed before less specific wildcard entries. For example, `\"*.foo.example.com\"` takes precedence over `\"*.example.com\"`. The precise definition here is that the higher the number of dots in the hostname to the right of the wildcard character, the higher the precedence.\n\nThe wildcard character will match any number of characters _and dots_ to the left, however, so `\"*.example.com\"` will match both `\"foo.bar.example.com\"` _and_ `\"bar.example.com\"`.\n\nIf a set of Listeners contains Listeners that are not distinct, then those Listeners are Conflicted, and the implementation MUST set the \"Conflicted\" condition in the Listener Status to \"True\".\n\nImplementations MAY choose to accept a Gateway with some Conflicted Listeners only if they only accept the partial Listener set that contains no Conflicted Listeners. To put this another way, implementations may accept a partial Listener set only if they throw out *all* the conflicting Listeners. No picking one of the conflicting listeners as the winner. This also means that the Gateway must have at least one non-conflicting Listener in this case, otherwise it violates the requirement that at least one Listener must be present.\n\nThe implementation MUST set a \"ListenersNotValid\" condition on the Gateway Status when the Gateway contains Conflicted Listeners whether or not they accept the Gateway. That Condition SHOULD clearly indicate in the Message which Listeners are conflicted, and which are Accepted. Additionally, the Listener status for those listeners SHOULD indicate which Listeners are conflicted and not Accepted.\n\nA Gateway's Listeners are considered \"compatible\" if:\n\n1. They are distinct. 2. The implementation can serve them in compliance with the Addresses\n   requirement that all Listeners are available on all assigned\n   addresses.\n\nCompatible combinations in Extended support are expected to vary across implementations. A combination that is compatible for one implementation may not be compatible for another.\n\nFor example, an implementation that cannot serve both TCP and UDP listeners on the same address, or cannot mix HTTPS and generic TLS listens on the same port would not consider those cases compatible, even though they are distinct.\n\nNote that requests SHOULD match at most one Listener. For example, if Listeners are defined for \"foo.example.com\" and \"*.example.com\", a request to \"foo.example.com\" SHOULD only be routed using routes attached to the \"foo.example.com\" Listener (and not the \"*.example.com\" Listener). This concept is known as \"Listener Isolation\". Implementations that do not support Listener Isolation MUST clearly document this.\n\nImplementations MAY merge separate Gateways onto a single set of Addresses if all Listeners across all Gateways are compatible.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.Listener",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "required": [
        "gatewayClassName",
        "listeners"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.GatewayTLSConfig": {
      "additionalProperties": false,
      "description": "GatewayTLSConfig describes a TLS configuration.",
      "properties": {
        "certificateRefs": {
          "description": "CertificateRefs contains a series of references to Kubernetes objects that contains TLS certificates and private keys. These certificates are used to establish a TLS handshake for requests that match the hostname of the associated listener.\n\nA single CertificateRef to a Kubernetes Secret has \"Core\" support. Implementations MAY choose to support attaching multiple certificates to a Listener, but this behavior is implementation-specific.\n\nReferences to a resource in different namespace are invalid UNLESS there is a ReferenceGrant in the target namespace that allows the certificate to be attached. If a ReferenceGrant does not allow this reference, the \"ResolvedRefs\" condition MUST be set to False for this listener with the \"RefNotPermitted\" reason.\n\nThis field is required to have at least one element when the mode is set to \"Terminate\" (default) and is optional otherwise.\n\nCertificateRefs can reference to standard Kubernetes resources, i.e. Secret, or implementation-specific custom resources.\n\nSupport: Core - A single reference to a Kubernetes Secret of type kubernetes.io/tls\n\nSupport: Implementation-specific (More than one reference or other resource types)",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.SecretObjectReference",
            "default": {}
          },
          "type": "array"
        },
        "frontendValidation": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.FrontendTLSValidation",
          "description": "FrontendValidation holds configuration information for validating the frontend (client). Setting this field will require clients to send a client certificate required for validation during the TLS handshake. In browsers this may result in a dialog appearing that requests a user to specify the client certificate. The maximum depth of a certificate chain accepted in verification is Implementation specific.\n\nSupport: Extended\n\n\u003cgateway:experimental\u003e"
        },
        "mode": {
          "description": "Mode defines the TLS behavior for the TLS session initiated by the client. There are two possible modes:\n\n- Terminate: The TLS session between the downstream client and the\n  Gateway is terminated at the Gateway. This mode requires certificates\n  to be specified in some way, such as populating the certificateRefs\n  field.\n- Passthrough: The TLS session is NOT terminated by the Gateway. This\n  implies that the Gateway can't decipher the TLS stream except for\n  the ClientHello message of the TLS protocol. The certificateRefs field\n  is ignored in this mode.\n\nSupport: Core",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Options are a list of key/value pairs to enable extended TLS configuration for each implementation. For example, configuring the minimum TLS version or supported cipher suites.\n\nA set of common keys MAY be defined by the API in the future. To avoid any ambiguity, implementation-specific definitions MUST use domain-prefixed names, such as `example.com/my-custom-option`. Un-prefixed names are reserved for key names defined by Gateway API.\n\nSupport: Implementation-specific",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPBackendRef": {
      "additionalProperties": false,
      "description": "HTTPBackendRef defines how a HTTPRoute should forward an HTTP request.",
      "properties": {
        "filters": {
          "description": "Filters defined at this level should be executed if and only if the request is being forwarded to the backend defined here.\n\nSupport: Implementation-specific (For broader support of filters, use the Filters field in HTTPRouteRule.)",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteFilter",
            "default": {}
          },
          "type": "array"
        },
        "group": {
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is the Kubernetes resource kind of the referent. For example \"Service\".\n\nDefaults to \"Service\" when not specified.\n\nExternalName services can refer to CNAME DNS records that may live outside of the cluster and as such are difficult to reason about in terms of conformance. They also may not be safe to forward to (see CVE-2021-25740 for more information). Implementations SHOULD NOT support ExternalName Services.\n\nSupport: Core (Services with a type other than ExternalName)\n\nSupport: Implementation-specific (Services with type ExternalName)",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the backend. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "description": "Port specifies the destination port number to use for this resource. Port is required when the referent is a Kubernetes Service. In this case, the port number is the service port number, not the target port. For other resources, destination port might be derived from the referent resource or this field.",
          "format": "int32",
          "type": "integer"
        },
        "weight": {
          "description": "Weight specifies the proportion of requests forwarded to the referenced backend. This is computed as weight/(sum of all weights in this BackendRefs list). For non-zero values, there may be some epsilon from the exact proportion defined here depending on the precision an implementation supports. Weight is not a percentage and the sum of weights does not need to equal 100.\n\nIf only one backend is specified and it has a weight greater than 0, 100% of the traffic is forwarded to that backend. If weight is set to 0, no traffic should be forwarded for this entry. If unspecified, weight defaults to 1.\n\nSupport for this field varies based on the context where used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPHeader": {
      "additionalProperties": false,
      "description": "HTTPHeader represents an HTTP Header name and value as defined by RFC 7230.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \"foo\" and \"Foo\" are considered equivalent.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value is the value of HTTP Header to be matched.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderFilter": {
      "additionalProperties": false,
      "description": "HTTPHeaderFilter defines a filter that modifies the headers of an HTTP request or response.",
      "properties": {
        "add": {
          "description": "Add adds the given header(s) (name, value) to the request before the action. It appends to any existing values associated with the header name.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  add:\n  - name: \"my-header\"\n    value: \"bar,baz\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: foo,bar,baz",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeader",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "remove": {
          "description": "Remove the given header(s) from the HTTP request before the action. The value of Remove is a list of HTTP header names. Note that the header names are case-insensitive (see https://datatracker.ietf.org/doc/html/rfc2616#section-4.2).\n\nInput:\n  GET /foo HTTP/1.1\n  my-header1: foo\n  my-header2: bar\n  my-header3: baz\n\nConfig:\n  remove: [\"my-header1\", \"my-header3\"]\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header2: bar",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "set": {
          "description": "Set overwrites the request with the given header (name, value) before the action.\n\nInput:\n  GET /foo HTTP/1.1\n  my-header: foo\n\nConfig:\n  set:\n  - name: \"my-header\"\n    value: \"bar\"\n\nOutput:\n  GET /foo HTTP/1.1\n  my-header: bar",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeader",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderMatch": {
      "additionalProperties": false,
      "description": "HTTPHeaderMatch describes how to select a HTTP route by matching HTTP request headers.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the HTTP Header to be matched. Name matching MUST be case insensitive. (See https://tools.ietf.org/html/rfc7230#section-3.2).\n\nIf multiple entries specify equivalent header names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent header name MUST be ignored. Due to the case-insensitivity of header names, \"foo\" and \"Foo\" are considered equivalent.\n\nWhen a header is repeated in an HTTP request, it is implementation-specific behavior as to how this is represented. Generally, proxies should follow the guidance from the RFC: https://www.rfc-editor.org/rfc/rfc7230.html#section-3.2.2 regarding processing a repeated header, with special handling for \"Set-Cookie\".",
          "type": "string"
        },
        "type": {
          "description": "Type specifies how to match against the value of the header.\n\nSupport: Core (Exact)\n\nSupport: Implementation-specific (RegularExpression)\n\nSince RegularExpression HeaderMatchType has implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value is the value of HTTP Header to be matched.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPPathMatch": {
      "additionalProperties": false,
      "description": "HTTPPathMatch describes how to select a HTTP route by matching the HTTP request path.",
      "properties": {
        "type": {
          "description": "Type specifies how to match against the path Value.\n\nSupport: Core (Exact, PathPrefix)\n\nSupport: Implementation-specific (RegularExpression)",
          "type": "string"
        },
        "value": {
          "description": "Value of the HTTP path to match against.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPPathModifier": {
      "additionalProperties": false,
      "description": "HTTPPathModifier defines configuration for path modifiers. \u003cgateway:experimental\u003e",
      "properties": {
        "replaceFullPath": {
          "description": "ReplaceFullPath specifies the value with which to replace the full path of a request during a rewrite or redirect.",
          "type": "string"
        },
        "replacePrefixMatch": {
          "description": "ReplacePrefixMatch specifies the value with which to replace the prefix match of a request during a rewrite or redirect. For example, a request to \"/foo/bar\" with a prefix match of \"/foo\" and a ReplacePrefixMatch of \"/xyz\" would be modified to \"/xyz/bar\".\n\nNote that this matches the behavior of the PathPrefix match type. This matches full path elements. A path element refers to the list of labels in the path split by the `/` separator. When specified, a trailing `/` is ignored. For example, the paths `/abc`, `/abc/`, and `/abc/def` would all match the prefix `/abc`, but the path `/abcd` would not.\n\nReplacePrefixMatch is only compatible with a `PathPrefix` HTTPRouteMatch. Using any other HTTPRouteMatch type on the same HTTPRouteRule will result in the implementation setting the Accepted Condition for the Route to `status: False`.\n\nRequest Path | Prefix Match | Replace Prefix | Modified Path -------------|--------------|----------------|---------- /foo/bar     | /foo         | /xyz           | /xyz/bar /foo/bar     | /foo         | /xyz/          | /xyz/bar /foo/bar     | /foo/        | /xyz           | /xyz/bar /foo/bar     | /foo/        | /xyz/          | /xyz/bar /foo         | /foo         | /xyz           | /xyz /foo/        | /foo         | /xyz           | /xyz/ /foo/bar     | /foo         | \u003cempty string\u003e | /bar /foo/        | /foo         | \u003cempty string\u003e | / /foo         | /foo         | \u003cempty string\u003e | / /foo/        | /foo         | /              | / /foo         | /foo         | /              | /",
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type defines the type of path modifier. Additional types may be added in a future release of the API.\n\nNote that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPQueryParamMatch": {
      "additionalProperties": false,
      "description": "HTTPQueryParamMatch describes how to select a HTTP route by matching HTTP query parameters.",
      "properties": {
        "name": {
          "default": "",
          "description": "Name is the name of the HTTP query param to be matched. This must be an exact string match. (See https://tools.ietf.org/html/rfc7230#section-2.7.3).\n\nIf multiple entries specify equivalent query param names, only the first entry with an equivalent name MUST be considered for a match. Subsequent entries with an equivalent query param name MUST be ignored.\n\nIf a query param is repeated in an HTTP request, the behavior is purposely left undefined, since different data planes have different capabilities. However, it is *recommended* that implementations should match against the first value of the param if the data plane supports it, as this behavior is expected in other load balancing contexts outside of the Gateway API.\n\nUsers SHOULD NOT route traffic based on repeated query params to guard themselves against potential differences in the implementations.",
          "type": "string"
        },
        "type": {
          "description": "Type specifies how to match against the value of the query parameter.\n\nSupport: Extended (Exact)\n\nSupport: Implementation-specific (RegularExpression)\n\nSince RegularExpression QueryParamMatchType has Implementation-specific conformance, implementations can support POSIX, PCRE or any other dialects of regular expressions. Please read the implementation's documentation to determine the supported dialect.",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Value is the value of HTTP query param to be matched.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRequestMirrorFilter": {
      "additionalProperties": false,
      "description": "HTTPRequestMirrorFilter defines configuration for the RequestMirror filter.",
      "properties": {
        "backendRef": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.BackendObjectReference",
          "default": {},
          "description": "BackendRef references a resource where mirrored requests are sent.\n\nMirrored requests must be sent only to a single destination endpoint within this BackendRef, irrespective of how many endpoints are present within this BackendRef.\n\nIf the referent cannot be found, this BackendRef is invalid and must be dropped from the Gateway. The controller must ensure the \"ResolvedRefs\" condition on the Route status is set to `status: False` and not configure this backend in the underlying implementation.\n\nIf there is a cross-namespace reference to an *existing* object that is not allowed by a ReferenceGrant, the controller must ensure the \"ResolvedRefs\"  condition on the Route is set to `status: False`, with the \"RefNotPermitted\" reason and not configure this backend in the underlying implementation.\n\nIn either error case, the Message of the `ResolvedRefs` Condition should be used to provide more detail about the problem.\n\nSupport: Extended for Kubernetes Service\n\nSupport: Implementation-specific for any other resource"
        }
      },
      "required": [
        "backendRef"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRequestRedirectFilter": {
      "additionalProperties": false,
      "description": "HTTPRequestRedirect defines a filter that redirects a request. This filter MUST NOT be used on the same Route rule as a HTTPURLRewrite filter.",
      "properties": {
        "hostname": {
          "description": "Hostname is the hostname to be used in the value of the `Location` header in the response. When empty, the hostname in the `Host` header of the request is used.\n\nSupport: Core",
          "type": "string"
        },
        "path": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPPathModifier",
          "description": "Path defines parameters used to modify the path of the incoming request. The modified path is then used to construct the `Location` header. When empty, the request path is used as-is.\n\nSupport: Extended"
        },
        "port": {
          "description": "Port is the port to be used in the value of the `Location` header in the response.\n\nIf no port is specified, the redirect port MUST be derived using the following rules:\n\n* If redirect scheme is not-empty, the redirect port MUST be the well-known\n  port associated with the redirect scheme. Specifically \"http\" to port 80\n  and \"https\" to port 443. If the redirect scheme does not have a\n  well-known port, the listener port of the Gateway SHOULD be used.\n* If redirect scheme is empty, the redirect port MUST be the Gateway\n  Listener port.\n\nImplementations SHOULD NOT add the port number in the 'Location' header in the following cases:\n\n* A Location header that will use HTTP (whether that is determined via\n  the Listener protocol or the Scheme field) _and_ use port 80.\n* A Location header that will use HTTPS (whether that is determined via\n  the Listener protocol or the Scheme field) _and_ use port 443.\n\nSupport: Extended",
          "format": "int32",
          "type": "integer"
        },
        "scheme": {
          "description": "Scheme is the scheme to be used in the value of the `Location` header in the response. When empty, the scheme of the request is used.\n\nScheme redirects can affect the port of the redirect, for more information, refer to the documentation for the port field of this filter.\n\nNote that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.\n\nSupport: Extended",
          "type": "string"
        },
        "statusCode": {
          "description": "StatusCode is the HTTP status code to be used in response.\n\nNote that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.\n\nSupport: Core",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRouteFilter": {
      "additionalProperties": false,
      "description": "HTTPRouteFilter defines processing steps that must be completed during the request or response lifecycle. HTTPRouteFilters are meant as an extension point to express processing that may be done in Gateway implementations. Some examples include request or response modification, implementing authentication strategies, rate-limiting, and traffic shaping. API guarantee/conformance is defined based on the type of the filter.",
      "properties": {
        "extensionRef": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.LocalObjectReference",
          "description": "ExtensionRef is an optional, implementation-specific extension to the \"filter\" behavior.  For example, resource \"myroutefilter\" in group \"networking.example.net\"). ExtensionRef MUST NOT be used for core and extended filters.\n\nThis filter can be used multiple times within the same rule.\n\nSupport: Implementation-specific"
        },
        "requestHeaderModifier": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderFilter",
          "description": "RequestHeaderModifier defines a schema for a filter that modifies request headers.\n\nSupport: Core"
        },
        "requestMirror": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRequestMirrorFilter",
          "description": "RequestMirror defines a schema for a filter that mirrors requests. Requests are sent to the specified destination, but responses from that destination are ignored.\n\nThis filter can be used multiple times within the same rule. Note that not all implementations will be able to support mirroring to multiple backends.\n\nSupport: Extended"
        },
        "requestRedirect": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRequestRedirectFilter",
          "description": "RequestRedirect defines a schema for a filter that responds to the request with an HTTP redirection.\n\nSupport: Core"
        },
        "responseHeaderModifier": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderFilter",
          "description": "ResponseHeaderModifier defines a schema for a filter that modifies response headers.\n\nSupport: Extended"
        },
        "type": {
          "default": "",
          "description": "Type identifies the type of filter to apply. As with other API fields, types are classified into three conformance levels:\n\n- Core: Filter types and their corresponding configuration defined by\n  \"Support: Core\" in this package, e.g. \"RequestHeaderModifier\". All\n  implementations must support core filters.\n\n- Extended: Filter types and their corresponding configuration defined by\n  \"Support: Extended\" in this package, e.g. \"RequestMirror\". Implementers\n  are encouraged to support extended filters.\n\n- Implementation-specific: Filters that are defined and supported by\n  specific vendors.\n  In the future, filters showing convergence in behavior across multiple\n  implementations will be considered for inclusion in extended or core\n  conformance levels. Filter-specific configuration for such filters\n  is specified using the ExtensionRef field. `Type` should be set to\n  \"ExtensionRef\" for custom filters.\n\nImplementers are encouraged to define custom implementation types to extend the core API with implementation-specific behavior.\n\nIf a reference to a custom filter type cannot be resolved, the filter MUST NOT be skipped. Instead, requests that would have been processed by that filter MUST receive a HTTP error response.\n\nNote that values may be added to this enum, implementations must ensure that unknown values will not cause a crash.\n\nUnknown values here must result in the implementation setting the Accepted Condition for the Route to `status: False`, with a Reason of `UnsupportedValue`.",
          "type": "string"
        },
        "urlRewrite": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPURLRewriteFilter",
          "description": "URLRewrite defines a schema for a filter that modifies a request during forwarding.\n\nSupport: Extended"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRouteMatch": {
      "additionalProperties": false,
      "description": "HTTPRouteMatch defines the predicate used to match requests to a given action. Multiple match types are ANDed together, i.e. the match will evaluate to true only if all conditions are satisfied.\n\nFor example, the match below will match a HTTP request only if its path starts with `/foo` AND it contains the `version: v1` header:\n\n``` match:\n\n\tpath:\n\t  value: \"/foo\"\n\theaders:\n\t- name: \"version\"\n\t  value \"v1\"\n\n```",
      "properties": {
        "headers": {
          "description": "Headers specifies HTTP request header matchers. Multiple match values are ANDed together, meaning, a request must match all the specified headers to select the route.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPHeaderMatch",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        },
        "method": {
          "description": "Method specifies HTTP method matcher. When specified, this route will be matched only if the request has the specified method.\n\nSupport: Extended",
          "type": "string"
        },
        "path": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPPathMatch",
          "description": "Path specifies a HTTP request path matcher. If this field is not specified, a default prefix match on the \"/\" path is provided."
        },
        "queryParams": {
          "description": "QueryParams specifies HTTP query parameter matchers. Multiple match values are ANDed together, meaning, a request must match all the specified query parameters to select the route.\n\nSupport: Extended",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPQueryParamMatch",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRouteRule": {
      "additionalProperties": false,
      "description": "HTTPRouteRule defines semantics for matching an HTTP request based on conditions (matches), processing it (filters), and forwarding the request to an API object (backendRefs).",
      "properties": {
        "backendRefs": {
          "description": "BackendRefs defines the backend(s) where matching requests should be sent.\n\nFailure behavior here depends on how many BackendRefs are specified and how many are invalid.\n\nIf *all* entries in BackendRefs are invalid, and there are also no filters specified in this route rule, *all* traffic which matches this rule MUST receive a 500 status code.\n\nSee the HTTPBackendRef definition for the rules about what makes a single HTTPBackendRef invalid.\n\nWhen a HTTPBackendRef is invalid, 500 status codes MUST be returned for requests that would have otherwise been routed to an invalid backend. If multiple backends are specified, and some are invalid, the proportion of requests that would otherwise have been routed to an invalid backend MUST receive a 500 status code.\n\nFor example, if two backends are specified with equal weights, and one is invalid, 50 percent of traffic must receive a 500. Implementations may choose how that 50 percent is determined.\n\nSupport: Core for Kubernetes Service\n\nSupport: Extended for Kubernetes ServiceImport\n\nSupport: Implementation-specific for any other resource\n\nSupport for weight: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPBackendRef",
            "default": {}
          },
          "type": "array"
        },
        "filters": {
          "description": "Filters define the filters that are applied to requests that match this rule.\n\nWherever possible, implementations SHOULD implement filters in the order they are specified.\n\nImplementations MAY choose to implement this ordering strictly, rejecting any combination or order of filters that can not be supported. If implementations choose a strict interpretation of filter ordering, they MUST clearly document that behavior.\n\nTo reject an invalid combination or order of filters, implementations SHOULD consider the Route Rules with this configuration invalid. If all Route Rules in a Route are invalid, the entire Route would be considered invalid. If only a portion of Route Rules are invalid, implementations MUST set the \"PartiallyInvalid\" condition for the Route.\n\nConformance-levels at this level are defined based on the type of filter:\n\n- ALL core filters MUST be supported by all implementations. - Implementers are encouraged to support extended filters. - Implementation-specific custom filters have no API guarantees across\n  implementations.\n\nSpecifying the same filter multiple times is not supported unless explicitly indicated in the filter.\n\nAll filters are expected to be compatible with each other except for the URLRewrite and RequestRedirect filters, which may not be combined. If an implementation can not support other combinations of filters, they must clearly document that limitation. In cases where incompatible or unsupported filters are specified and cause the `Accepted` condition to be set to status `False`, implementations may use the `IncompatibleFilters` reason to specify this configuration error.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteFilter",
            "default": {}
          },
          "type": "array"
        },
        "matches": {
          "description": "Matches define conditions used for matching the rule against incoming HTTP requests. Each match is independent, i.e. this rule will be matched if **any** one of the matches is satisfied.\n\nFor example, take the following matches configuration:\n\n``` matches: - path:\n    value: \"/foo\"\n  headers:\n  - name: \"version\"\n    value: \"v2\"\n- path:\n    value: \"/v2/foo\"\n```\n\nFor a request to match against this rule, a request must satisfy EITHER of the two conditions:\n\n- path prefixed with `/foo` AND contains the header `version: v2` - path prefix of `/v2/foo`\n\nSee the documentation for HTTPRouteMatch on how to specify multiple match conditions that should be ANDed together.\n\nIf no matches are specified, the default is a prefix path match on \"/\", which has the effect of matching every HTTP request.\n\nProxy or Load Balancer routing configuration generated from HTTPRoutes MUST prioritize matches based on the following criteria, continuing on ties. Across all rules specified on applicable Routes, precedence must be given to the match having:\n\n* \"Exact\" path match. * \"Prefix\" path match with largest number of characters. * Method match. * Largest number of header matches. * Largest number of query param matches.\n\nNote: The precedence of RegularExpression path matches are implementation-specific.\n\nIf ties still exist across multiple Routes, matching precedence MUST be determined in order of the following criteria, continuing on ties:\n\n* The oldest Route based on creation timestamp. * The Route appearing first in alphabetical order by\n  \"{namespace}/{name}\".\n\nIf ties still exist within an HTTPRoute, matching precedence MUST be granted to the FIRST matching rule (in list order) with a match meeting the above criteria.\n\nWhen no rules matching a request have been successfully attached to the parent a request is coming from, a HTTP 404 status code MUST be returned.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteMatch",
            "default": {}
          },
          "type": "array"
        },
        "sessionPersistence": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.SessionPersistence",
          "description": "SessionPersistence defines and configures session persistence for the route rule.\n\nSupport: Extended\n\n\u003cgateway:experimental\u003e"
        },
        "timeouts": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteTimeouts",
          "description": "Timeouts defines the timeouts that can be configured for an HTTP request.\n\nSupport: Extended\n\n\u003cgateway:experimental\u003e"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRouteSpec": {
      "additionalProperties": false,
      "description": "HTTPRouteSpec defines the desired state of HTTPRoute",
      "properties": {
        "hostnames": {
          "description": "Hostnames defines a set of hostnames that should match against the HTTP Host header to select a HTTPRoute used to process the request. Implementations MUST ignore any port value specified in the HTTP Host header while performing a match and (absent of any applicable header modification configuration) MUST forward this header unmodified to the backend.\n\nValid values for Hostnames are determined by RFC 1123 definition of a hostname with 2 notable exceptions:\n\n1. IPs are not allowed. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard\n   label must appear by itself as the first label.\n\nIf a hostname is specified by both the Listener and HTTPRoute, there must be at least one intersecting hostname for the HTTPRoute to be attached to the Listener. For example:\n\n* A Listener with `test.example.com` as the hostname matches HTTPRoutes\n  that have either not specified any hostnames, or have specified at\n  least one of `test.example.com` or `*.example.com`.\n* A Listener with `*.example.com` as the hostname matches HTTPRoutes\n  that have either not specified any hostnames or have specified at least\n  one hostname that matches the Listener hostname. For example,\n  `*.example.com`, `test.example.com`, and `foo.test.example.com` would\n  all match. On the other hand, `example.com` and `test.example.net` would\n  not match.\n\nHostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.\n\nIf both the Listener and HTTPRoute have specified hostnames, any HTTPRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the HTTPRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match.\n\nIf both the Listener and HTTPRoute have specified hostnames, and none match with the criteria above, then the HTTPRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.\n\nIn the event that multiple HTTPRoutes specify intersecting hostnames (e.g. overlapping wildcard matching and exact matching hostnames), precedence must be given to rules from the HTTPRoute with the largest number of:\n\n* Characters in a matching non-wildcard hostname. * Characters in a matching hostname.\n\nIf ties exist across multiple Routes, the matching precedence rules for HTTPRouteMatches takes over.\n\nSupport: Core",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "parentRefs": {
          "description": "ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \"producer\" route, or the mesh implementation must support and allow \"consumer\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \"producer\" route for a Service in a different namespace from the Route.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nThis API may be extended in the future to support additional kinds of parent resources.\n\nParentRefs must be _distinct_. This means either that:\n\n* They select different objects.  If this is the case, then parentRef\n  entries are distinct. In terms of fields, this means that the\n  multi-part key defined by `group`, `kind`, `namespace`, and `name` must\n  be unique across all parentRef entries in the Route.\n* They do not select different objects, but for each optional field used,\n  each ParentRef that selects the same object must set the same set of\n  optional fields to different values. If one ParentRef sets a\n  combination of optional fields, all must set the same combination.\n\nSome examples:\n\n* If one ParentRef sets `sectionName`, all ParentRefs referencing the\n  same object must also set `sectionName`.\n* If one ParentRef sets `port`, all ParentRefs referencing the same\n  object must also set `port`.\n* If one ParentRef sets `sectionName` and `port`, all ParentRefs\n  referencing the same object must also set `sectionName` and `port`.\n\nIt is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.\n\nNote that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\n\u003cgateway:standard:validation:XValidation:message=\"sectionName must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))\"\u003e \u003cgateway:standard:validation:XValidation:message=\"sectionName must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName))))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') \u0026\u0026 (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName)) \u0026\u0026 (((!has(p1.port) || p1.port == 0) \u0026\u0026 (!has(p2.port) || p2.port == 0)) || (has(p1.port) \u0026\u0026 has(p2.port) \u0026\u0026 p1.port == p2.port))))\"\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParentReference",
            "default": {}
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules are a list of HTTP matchers, filters and actions.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteRule",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPRouteTimeouts": {
      "additionalProperties": false,
      "description": "HTTPRouteTimeouts defines timeouts that can be configured for an HTTPRoute.",
      "properties": {
        "backendRequest": {
          "description": "BackendRequest specifies a timeout for an individual request from the gateway to a backend. This covers the time from when the request first starts being sent from the gateway to when the full response has been received from the backend.\n\nSetting a timeout to the zero duration (e.g. \"0s\") SHOULD disable the timeout completely. Implementations that cannot completely disable the timeout MUST instead interpret the zero duration as the longest possible value to which the timeout can be set.\n\nAn entire client HTTP transaction with a gateway, covered by the Request timeout, may result in more than one call from the gateway to the destination backend, for example, if automatic retries are supported.\n\nBecause the Request timeout encompasses the BackendRequest timeout, the value of BackendRequest must be \u003c= the value of Request timeout.\n\nSupport: Extended",
          "type": "string"
        },
        "request": {
          "description": "Request specifies the maximum duration for a gateway to respond to an HTTP request. If the gateway has not been able to respond before this deadline is met, the gateway MUST return a timeout error.\n\nFor example, setting the `rules.timeouts.request` field to the value `10s` in an `HTTPRoute` will cause a timeout if a client request is taking longer than 10 seconds to complete.\n\nSetting a timeout to the zero duration (e.g. \"0s\") SHOULD disable the timeout completely. Implementations that cannot completely disable the timeout MUST instead interpret the zero duration as the longest possible value to which the timeout can be set.\n\nThis timeout is intended to cover as close to the whole request-response transaction as possible although an implementation MAY choose to start the timeout after the entire request stream has been received instead of immediately after the transaction is initiated by the client.\n\nWhen this field is unspecified, request timeout behavior is implementation-specific.\n\nSupport: Extended",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.HTTPURLRewriteFilter": {
      "additionalProperties": false,
      "description": "HTTPURLRewriteFilter defines a filter that modifies a request during forwarding. At most one of these filters may be used on a Route rule. This MUST NOT be used on the same Route rule as a HTTPRequestRedirect filter.\n\nSupport: Extended\n\n\u003cgateway:experimental\u003e",
      "properties": {
        "hostname": {
          "description": "Hostname is the value to be used to replace the Host header value during forwarding.\n\nSupport: Extended",
          "type": "string"
        },
        "path": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPPathModifier",
          "description": "Path defines a path rewrite.\n\nSupport: Extended"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.Listener": {
      "additionalProperties": false,
      "description": "Listener embodies the concept of a logical endpoint where a Gateway accepts network connections.",
      "properties": {
        "allowedRoutes": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.AllowedRoutes",
          "description": "AllowedRoutes defines the types of routes that MAY be attached to a Listener and the trusted namespaces where those Route resources MAY be present.\n\nAlthough a client request may match multiple route rules, only one rule may ultimately receive the request. Matching precedence MUST be determined in order of the following criteria:\n\n* The most specific match as defined by the Route type. * The oldest Route based on creation timestamp. For example, a Route with\n  a creation timestamp of \"2020-09-08 01:02:03\" is given precedence over\n  a Route with a creation timestamp of \"2020-09-08 01:02:04\".\n* If everything else is equivalent, the Route appearing first in\n  alphabetical order (namespace/name) should be given precedence. For\n  example, foo/bar is given precedence over foo/baz.\n\nAll valid rules within a Route attached to this Listener should be implemented. Invalid Route rules can be ignored (sometimes that will mean the full Route). If a Route rule transitions from valid to invalid, support for that Route rule should be dropped to ensure consistency. For example, even if a filter specified by a Route rule is invalid, the rest of the rules within that Route should still be supported.\n\nSupport: Core"
        },
        "hostname": {
          "description": "Hostname specifies the virtual hostname to match for protocol types that define this concept. When unspecified, all hostnames are matched. This field is ignored for protocols that don't require hostname based matching.\n\nImplementations MUST apply Hostname matching appropriately for each of the following protocols:\n\n* TLS: The Listener Hostname MUST match the SNI. * HTTP: The Listener Hostname MUST match the Host header of the request. * HTTPS: The Listener Hostname SHOULD match at both the TLS and HTTP\n  protocol layers as described above. If an implementation does not\n  ensure that both the SNI and Host header match the Listener hostname,\n  it MUST clearly document that.\n\nFor HTTPRoute and TLSRoute resources, there is an interaction with the `spec.hostnames` array. When both listener and route specify hostnames, there MUST be an intersection between the values for a Route to be accepted. For more information, refer to the Route specific Hostnames documentation.\n\nHostnames that are prefixed with a wildcard label (`*.`) are interpreted as a suffix match. That means that a match for `*.example.com` would match both `test.example.com`, and `foo.test.example.com`, but not `example.com`.\n\nSupport: Core",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the Listener. This name MUST be unique within a Gateway.\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "default": 0,
          "description": "Port is the network port. Multiple listeners may use the same port, subject to the Listener compatibility rules.\n\nSupport: Core",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "",
          "description": "Protocol specifies the network protocol this listener expects to receive.\n\nSupport: Core",
          "type": "string"
        },
        "tls": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GatewayTLSConfig",
          "description": "TLS is the TLS configuration for the Listener. This field is required if the Protocol field is \"HTTPS\" or \"TLS\". It is invalid to set this field if the Protocol field is \"HTTP\", \"TCP\", or \"UDP\".\n\nThe association of SNIs to Certificate defined in GatewayTLSConfig is defined based on the Hostname field for this listener.\n\nThe GatewayClass MUST use the longest matching SNI out of all available certificates for any TLS handshake.\n\nSupport: Core"
        }
      },
      "required": [
        "name",
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.LocalObjectReference": {
      "additionalProperties": false,
      "description": "LocalObjectReference identifies an API object within the namespace of the referrer. The API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.\n\nReferences to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is kind of the referent. For example \"HTTPRoute\" or \"Service\".",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.LocalParametersReference": {
      "additionalProperties": false,
      "description": "LocalParametersReference identifies an API object containing controller-specific configuration resource within the namespace.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is kind of the referent.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.ObjectReference": {
      "additionalProperties": false,
      "description": "ObjectReference identifies an API object including its namespace.\n\nThe API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.\n\nReferences to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is kind of the referent. For example \"ConfigMap\" or \"Service\".",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.ParametersReference": {
      "additionalProperties": false,
      "description": "ParametersReference identifies an API object containing controller-specific configuration resource within the cluster.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is kind of the referent.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the referent. This field is required when referring to a Namespace-scoped resource and MUST be unset when referring to a Cluster-scoped resource.",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.ParentReference": {
      "additionalProperties": false,
      "description": "ParentReference identifies an API object (usually a Gateway) that can be considered a parent of this resource (usually a route). The only kind of parent resource with \"Core\" support is Gateway. This API may be extended in the future to support additional kinds of parent resources, such as HTTPRoute.\n\nNote that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\n\nThe API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.",
      "properties": {
        "group": {
          "description": "Group is the group of the referent. When unspecified, \"gateway.networking.k8s.io\" is inferred. To set the core API group (such as for a \"Service\" kind referent), Group must be explicitly set to \"\" (empty string).\n\nSupport: Core",
          "type": "string"
        },
        "kind": {
          "description": "Kind is kind of the referent.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nSupport for other resources is Implementation-Specific.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.\n\nSupport: Core",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the referent. When unspecified, this refers to the local namespace of the Route.\n\nNote that there are specific rules for ParentRefs which cross namespace boundaries. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example: Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable any other kind of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\nSupport: Core",
          "type": "string"
        },
        "port": {
          "description": "Port is the network port this Route targets. It can be interpreted differently based on the type of parent resource.\n\nWhen the parent resource is a Gateway, this targets all listeners listening on the specified port that also support this kind of Route(and select this Route). It's not recommended to set `Port` unless the networking behaviors specified in a Route must apply to a specific port as opposed to a listener(s) whose port(s) may be changed. When both Port and SectionName are specified, the name and port of the selected listener must match both specified values.\n\n\u003cgateway:experimental:description\u003e When the parent resource is a Service, this targets a specific port in the Service spec. When both Port (experimental) and SectionName are specified, the name and port of the selected port must match both specified values. \u003c/gateway:experimental:description\u003e\n\nImplementations MAY choose to support other parent resources. Implementations supporting other types of parent resources MUST clearly document how/if Port is interpreted.\n\nFor the purpose of status, an attachment is considered successful as long as the parent resource accepts it partially. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.\n\nSupport: Extended",
          "format": "int32",
          "type": "integer"
        },
        "sectionName": {
          "description": "SectionName is the name of a section within the target resource. In the following resources, SectionName is interpreted as the following:\n\n* Gateway: Listener name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values. * Service: Port name. When both Port (experimental) and SectionName are specified, the name and port of the selected listener must match both specified values.\n\nImplementations MAY choose to support attaching Routes to other resources. If that is the case, they MUST clearly document how SectionName is interpreted.\n\nWhen unspecified (empty string), this will reference the entire resource. For the purpose of status, an attachment is considered successful if at least one section in the parent resource accepts it. For example, Gateway listeners can restrict which Routes can attach to them by Route kind, namespace, or hostname. If 1 of 2 Gateway listeners accept attachment from the referencing Route, the Route MUST be considered successfully attached. If no Gateway listeners accept attachment from this Route, the Route MUST be considered detached from the Gateway.\n\nSupport: Core",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.RouteGroupKind": {
      "additionalProperties": false,
      "description": "RouteGroupKind indicates the group and kind of a Route resource.",
      "properties": {
        "group": {
          "description": "Group is the group of the Route.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the kind of the Route.",
          "type": "string"
        }
      },
      "required": [
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.RouteNamespaces": {
      "additionalProperties": false,
      "description": "RouteNamespaces indicate which namespaces Routes should be selected from.",
      "properties": {
        "from": {
          "description": "From indicates where Routes will be selected for this Gateway. Possible values are:\n\n* All: Routes in all namespaces may be used by this Gateway. * Selector: Routes in namespaces selected by the selector may be used by\n  this Gateway.\n* Same: Only Routes in the same namespace may be used by this Gateway.\n\nSupport: Core",
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selector must be specified when From is set to \"Selector\". In that case, only Routes in Namespaces matching this Selector will be selected by this Gateway. This field is ignored for other values of \"From\".\n\nSupport: Core"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.SecretObjectReference": {
      "additionalProperties": false,
      "description": "SecretObjectReference identifies an API object including its namespace, defaulting to Secret.\n\nThe API object must be valid in the cluster; the Group and Kind must be registered in the cluster for this reference to be valid.\n\nReferences to objects with invalid Group and Kind are not valid, and must be rejected by the implementation, with appropriate Conditions set on the containing object.",
      "properties": {
        "group": {
          "description": "Group is the group of the referent. For example, \"gateway.networking.k8s.io\". When unspecified or empty string, core API group is inferred.",
          "type": "string"
        },
        "kind": {
          "description": "Kind is kind of the referent. For example \"Secret\".",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace is the namespace of the referenced object. When unspecified, the local namespace is inferred.\n\nNote that when a namespace different than the local namespace is specified, a ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.\n\nSupport: Core",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1.SessionPersistence": {
      "additionalProperties": false,
      "description": "SessionPersistence defines the desired state of SessionPersistence.",
      "properties": {
        "absoluteTimeout": {
          "description": "AbsoluteTimeout defines the absolute timeout of the persistent session. Once the AbsoluteTimeout duration has elapsed, the session becomes invalid.\n\nSupport: Extended",
          "type": "string"
        },
        "cookieConfig": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.CookieConfig",
          "description": "CookieConfig provides configuration settings that are specific to cookie-based session persistence.\n\nSupport: Core"
        },
        "idleTimeout": {
          "description": "IdleTimeout defines the idle timeout of the persistent session. Once the session has been idle for more than the specified IdleTimeout duration, the session becomes invalid.\n\nSupport: Extended",
          "type": "string"
        },
        "sessionName": {
          "description": "SessionName defines the name of the persistent session token which may be reflected in the cookie or the header. Users should avoid reusing session names to prevent unintended consequences, such as rejection or unpredictable behavior.\n\nSupport: Implementation-specific",
          "type": "string"
        },
        "type": {
          "description": "Type defines the type of session persistence such as through the use a header or cookie. Defaults to cookie based session persistence.\n\nSupport: Core for \"Cookie\" type\n\nSupport: Extended for \"Header\" type",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.BackendLBPolicySpec": {
      "additionalProperties": false,
      "description": "BackendLBPolicySpec defines the desired state of BackendLBPolicy. Note: there is no Override or Default policy configuration.",
      "properties": {
        "sessionPersistence": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.SessionPersistence",
          "description": "SessionPersistence defines and configures session persistence for the backend.\n\nSupport: Extended"
        },
        "targetRefs": {
          "description": "TargetRef identifies an API object to apply policy to. Currently, Backends (i.e. Service, ServiceImport, or any implementation-specific backendRef) are the only valid API target references.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.LocalPolicyTargetReference",
            "default": {}
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "group",
            "kind",
            "name"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "required": [
        "targetRefs"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.LocalPolicyTargetReference": {
      "additionalProperties": false,
      "description": "LocalPolicyTargetReference identifies an API object to apply a direct or inherited policy to. This should be used as part of Policy resources that can target Gateway API resources. For more information on how this policy attachment model works, and a sample Policy resource, refer to the policy attachment documentation for Gateway API.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the target resource.",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is kind of the target resource.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "Name is the name of the target resource.",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRouteRule": {
      "additionalProperties": false,
      "description": "TCPRouteRule is the configuration for a given rule.",
      "properties": {
        "backendRefs": {
          "description": "BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Connection rejections must respect weight; if an invalid backend is requested to have 80% of connections, then 80% of connections must be rejected instead.\n\nSupport: Core for Kubernetes Service\n\nSupport: Extended for Kubernetes ServiceImport\n\nSupport: Implementation-specific for any other resource\n\nSupport for weight: Extended",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.BackendRef",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRouteSpec": {
      "additionalProperties": false,
      "description": "TCPRouteSpec defines the desired state of TCPRoute",
      "properties": {
        "parentRefs": {
          "description": "ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \"producer\" route, or the mesh implementation must support and allow \"consumer\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \"producer\" route for a Service in a different namespace from the Route.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nThis API may be extended in the future to support additional kinds of parent resources.\n\nParentRefs must be _distinct_. This means either that:\n\n* They select different objects.  If this is the case, then parentRef\n  entries are distinct. In terms of fields, this means that the\n  multi-part key defined by `group`, `kind`, `namespace`, and `name` must\n  be unique across all parentRef entries in the Route.\n* They do not select different objects, but for each optional field used,\n  each ParentRef that selects the same object must set the same set of\n  optional fields to different values. If one ParentRef sets a\n  combination of optional fields, all must set the same combination.\n\nSome examples:\n\n* If one ParentRef sets `sectionName`, all ParentRefs referencing the\n  same object must also set `sectionName`.\n* If one ParentRef sets `port`, all ParentRefs referencing the same\n  object must also set `port`.\n* If one ParentRef sets `sectionName` and `port`, all ParentRefs\n  referencing the same object must also set `sectionName` and `port`.\n\nIt is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.\n\nNote that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\n\u003cgateway:standard:validation:XValidation:message=\"sectionName must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))\"\u003e \u003cgateway:standard:validation:XValidation:message=\"sectionName must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName))))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') \u0026\u0026 (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName)) \u0026\u0026 (((!has(p1.port) || p1.port == 0) \u0026\u0026 (!has(p2.port) || p2.port == 0)) || (has(p1.port) \u0026\u0026 has(p2.port) \u0026\u0026 p1.port == p2.port))))\"\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParentReference",
            "default": {}
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules are a list of TCP matchers and actions.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRouteRule",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRouteRule": {
      "additionalProperties": false,
      "description": "TLSRouteRule is the configuration for a given rule.",
      "properties": {
        "backendRefs": {
          "description": "BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the rule performs no forwarding; if no filters are specified that would result in a response being sent, the underlying implementation must actively reject request attempts to this backend, by rejecting the connection or returning a 500 status code. Request rejections must respect weight; if an invalid backend is requested to have 80% of requests, then 80% of requests must be rejected instead.\n\nSupport: Core for Kubernetes Service\n\nSupport: Extended for Kubernetes ServiceImport\n\nSupport: Implementation-specific for any other resource\n\nSupport for weight: Extended",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.BackendRef",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRouteSpec": {
      "additionalProperties": false,
      "description": "TLSRouteSpec defines the desired state of a TLSRoute resource.",
      "properties": {
        "hostnames": {
          "description": "Hostnames defines a set of SNI names that should match against the SNI attribute of TLS ClientHello message in TLS handshake. This matches the RFC 1123 definition of a hostname with 2 notable exceptions:\n\n1. IPs are not allowed in SNI names per RFC 6066. 2. A hostname may be prefixed with a wildcard label (`*.`). The wildcard\n   label must appear by itself as the first label.\n\nIf a hostname is specified by both the Listener and TLSRoute, there must be at least one intersecting hostname for the TLSRoute to be attached to the Listener. For example:\n\n* A Listener with `test.example.com` as the hostname matches TLSRoutes\n  that have either not specified any hostnames, or have specified at\n  least one of `test.example.com` or `*.example.com`.\n* A Listener with `*.example.com` as the hostname matches TLSRoutes\n  that have either not specified any hostnames or have specified at least\n  one hostname that matches the Listener hostname. For example,\n  `test.example.com` and `*.example.com` would both match. On the other\n  hand, `example.com` and `test.example.net` would not match.\n\nIf both the Listener and TLSRoute have specified hostnames, any TLSRoute hostnames that do not match the Listener hostname MUST be ignored. For example, if a Listener specified `*.example.com`, and the TLSRoute specified `test.example.com` and `test.example.net`, `test.example.net` must not be considered for a match.\n\nIf both the Listener and TLSRoute have specified hostnames, and none match with the criteria above, then the TLSRoute is not accepted. The implementation must raise an 'Accepted' Condition with a status of `False` in the corresponding RouteParentStatus.\n\nSupport: Core",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array"
        },
        "parentRefs": {
          "description": "ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \"producer\" route, or the mesh implementation must support and allow \"consumer\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \"producer\" route for a Service in a different namespace from the Route.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nThis API may be extended in the future to support additional kinds of parent resources.\n\nParentRefs must be _distinct_. This means either that:\n\n* They select different objects.  If this is the case, then parentRef\n  entries are distinct. In terms of fields, this means that the\n  multi-part key defined by `group`, `kind`, `namespace`, and `name` must\n  be unique across all parentRef entries in the Route.\n* They do not select different objects, but for each optional field used,\n  each ParentRef that selects the same object must set the same set of\n  optional fields to different values. If one ParentRef sets a\n  combination of optional fields, all must set the same combination.\n\nSome examples:\n\n* If one ParentRef sets `sectionName`, all ParentRefs referencing the\n  same object must also set `sectionName`.\n* If one ParentRef sets `port`, all ParentRefs referencing the same\n  object must also set `port`.\n* If one ParentRef sets `sectionName` and `port`, all ParentRefs\n  referencing the same object must also set `sectionName` and `port`.\n\nIt is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.\n\nNote that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\n\u003cgateway:standard:validation:XValidation:message=\"sectionName must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))\"\u003e \u003cgateway:standard:validation:XValidation:message=\"sectionName must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName))))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') \u0026\u0026 (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName)) \u0026\u0026 (((!has(p1.port) || p1.port == 0) \u0026\u0026 (!has(p2.port) || p2.port == 0)) || (has(p1.port) \u0026\u0026 has(p2.port) \u0026\u0026 p1.port == p2.port))))\"\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParentReference",
            "default": {}
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules are a list of TLS matchers and actions.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRouteRule",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRouteRule": {
      "additionalProperties": false,
      "description": "UDPRouteRule is the configuration for a given rule.",
      "properties": {
        "backendRefs": {
          "description": "BackendRefs defines the backend(s) where matching requests should be sent. If unspecified or invalid (refers to a non-existent resource or a Service with no endpoints), the underlying implementation MUST actively reject connection attempts to this backend. Packet drops must respect weight; if an invalid backend is requested to have 80% of the packets, then 80% of packets must be dropped instead.\n\nSupport: Core for Kubernetes Service\n\nSupport: Extended for Kubernetes ServiceImport\n\nSupport: Implementation-specific for any other resource\n\nSupport for weight: Extended",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.BackendRef",
            "default": {}
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRouteSpec": {
      "additionalProperties": false,
      "description": "UDPRouteSpec defines the desired state of UDPRoute.",
      "properties": {
        "parentRefs": {
          "description": "ParentRefs references the resources (usually Gateways) that a Route wants to be attached to. Note that the referenced parent resource needs to allow this for the attachment to be complete. For Gateways, that means the Gateway needs to allow attachment from Routes of this kind and namespace. For Services, that means the Service must either be in the same namespace for a \"producer\" route, or the mesh implementation must support and allow \"consumer\" routes for the referenced Service. ReferenceGrant is not applicable for governing ParentRefs to Services - it is not possible to create a \"producer\" route for a Service in a different namespace from the Route.\n\nThere are two kinds of parent resources with \"Core\" support:\n\n* Gateway (Gateway conformance profile) * Service (Mesh conformance profile, ClusterIP Services only)\n\nThis API may be extended in the future to support additional kinds of parent resources.\n\nParentRefs must be _distinct_. This means either that:\n\n* They select different objects.  If this is the case, then parentRef\n  entries are distinct. In terms of fields, this means that the\n  multi-part key defined by `group`, `kind`, `namespace`, and `name` must\n  be unique across all parentRef entries in the Route.\n* They do not select different objects, but for each optional field used,\n  each ParentRef that selects the same object must set the same set of\n  optional fields to different values. If one ParentRef sets a\n  combination of optional fields, all must set the same combination.\n\nSome examples:\n\n* If one ParentRef sets `sectionName`, all ParentRefs referencing the\n  same object must also set `sectionName`.\n* If one ParentRef sets `port`, all ParentRefs referencing the same\n  object must also set `port`.\n* If one ParentRef sets `sectionName` and `port`, all ParentRefs\n  referencing the same object must also set `sectionName` and `port`.\n\nIt is possible to separately reference multiple distinct objects that may be collapsed by an implementation. For example, some implementations may choose to merge compatible Gateway Listeners together. If that is the case, the list of routes attached to those resources should also be merged.\n\nNote that for ParentRefs that cross namespace boundaries, there are specific rules. Cross-namespace references are only valid if they are explicitly allowed by something in the namespace they are referring to. For example, Gateway has the AllowedRoutes field, and ReferenceGrant provides a generic way to enable other kinds of cross-namespace reference.\n\n\u003cgateway:experimental:description\u003e ParentRefs from a Route to a Service in the same namespace are \"producer\" routes, which apply default routing rules to inbound connections from any namespace to the Service.\n\nParentRefs from a Route to a Service in a different namespace are \"consumer\" routes, and these routing rules are only applied to outbound connections originating from the same namespace as the Route, for which the intended destination of the connections are a Service targeted as a ParentRef of the Route. \u003c/gateway:experimental:description\u003e\n\n\u003cgateway:standard:validation:XValidation:message=\"sectionName must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '')) : true))\"\u003e \u003cgateway:standard:validation:XValidation:message=\"sectionName must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || (has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName))))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be specified when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.all(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__)) ? ((!has(p1.sectionName) || p1.sectionName == '') == (!has(p2.sectionName) || p2.sectionName == '') \u0026\u0026 (!has(p1.port) || p1.port == 0) == (!has(p2.port) || p2.port == 0)): true))\"\u003e \u003cgateway:experimental:validation:XValidation:message=\"sectionName or port must be unique when parentRefs includes 2 or more references to the same parent\",rule=\"self.all(p1, self.exists_one(p2, p1.group == p2.group \u0026\u0026 p1.kind == p2.kind \u0026\u0026 p1.name == p2.name \u0026\u0026 (((!has(p1.__namespace__) || p1.__namespace__ == '') \u0026\u0026 (!has(p2.__namespace__) || p2.__namespace__ == '')) || (has(p1.__namespace__) \u0026\u0026 has(p2.__namespace__) \u0026\u0026 p1.__namespace__ == p2.__namespace__ )) \u0026\u0026 (((!has(p1.sectionName) || p1.sectionName == '') \u0026\u0026 (!has(p2.sectionName) || p2.sectionName == '')) || ( has(p1.sectionName) \u0026\u0026 has(p2.sectionName) \u0026\u0026 p1.sectionName == p2.sectionName)) \u0026\u0026 (((!has(p1.port) || p1.port == 0) \u0026\u0026 (!has(p2.port) || p2.port == 0)) || (has(p1.port) \u0026\u0026 has(p2.port) \u0026\u0026 p1.port == p2.port))))\"\u003e",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.ParentReference",
            "default": {}
          },
          "type": "array"
        },
        "rules": {
          "description": "Rules are a list of UDP matchers and actions.",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRouteRule",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "rules"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantFrom": {
      "additionalProperties": false,
      "description": "ReferenceGrantFrom describes trusted namespaces and kinds.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent. When empty, the Kubernetes core API group is inferred.\n\nSupport: Core",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \"Core\" support level for this field.\n\nWhen used to permit a SecretObjectReference:\n\n* Gateway\n\nWhen used to permit a BackendObjectReference:\n\n* GRPCRoute * HTTPRoute * TCPRoute * TLSRoute * UDPRoute",
          "type": "string"
        },
        "namespace": {
          "default": "",
          "description": "Namespace is the namespace of the referent.\n\nSupport: Core",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind",
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantSpec": {
      "additionalProperties": false,
      "description": "ReferenceGrantSpec identifies a cross namespace relationship that is trusted for Gateway API.",
      "properties": {
        "from": {
          "description": "From describes the trusted namespaces and kinds that can reference the resources described in \"To\". Each entry in this list MUST be considered to be an additional place that references can be valid from, or to put this another way, entries MUST be combined using OR.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantFrom",
            "default": {}
          },
          "type": "array"
        },
        "to": {
          "description": "To describes the resources that may be referenced by the resources described in \"From\". Each entry in this list MUST be considered to be an additional place that references can be valid to, or to put this another way, entries MUST be combined using OR.\n\nSupport: Core",
          "items": {
            "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantTo",
            "default": {}
          },
          "type": "array"
        }
      },
      "required": [
        "from",
        "to"
      ],
      "type": "object"
    },
    "io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantTo": {
      "additionalProperties": false,
      "description": "ReferenceGrantTo describes what Kinds are allowed as targets of the references.",
      "properties": {
        "group": {
          "default": "",
          "description": "Group is the group of the referent. When empty, the Kubernetes core API group is inferred.\n\nSupport: Core",
          "type": "string"
        },
        "kind": {
          "default": "",
          "description": "Kind is the kind of the referent. Although implementations may support additional resources, the following types are part of the \"Core\" support level for this field:\n\n* Secret when used to permit a SecretObjectReference * Service when used to permit a BackendObjectReference",
          "type": "string"
        },
        "name": {
          "description": "Name is the name of the referent. When unspecified, this policy refers to all resources of the specified Group and Kind in the local namespace.",
          "type": "string"
        }
      },
      "required": [
        "group",
        "kind"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1.GRPCRoute": {
      "additionalProperties": false,
      "description": "GRPCRoute provides a way to route gRPC requests. This includes the capability to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header. Filters can be used to specify additional processing steps. Backends specify where matching requests will be routed.\n\nGRPCRoute falls under extended support within the Gateway API. Within the following specification, the word \"MUST\" indicates that an implementation supporting GRPCRoute must conform to the indicated requirement, but an implementation not supporting this route type need not follow the requirement unless explicitly indicated.\n\nImplementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via ALPN. If the implementation does not support this, then it MUST set the \"Accepted\" condition to \"False\" for the affected listener with a reason of \"UnsupportedProtocol\".  Implementations MAY also accept HTTP/2 connections with an upgrade from HTTP/1.\n\nImplementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST support HTTP/2 over cleartext TCP (h2c, https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial upgrade from HTTP/1.1, i.e. with prior knowledge (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation does not support this, then it MUST set the \"Accepted\" condition to \"False\" for the affected listener with a reason of \"UnsupportedProtocol\". Implementations MAY also accept HTTP/2 connections with an upgrade from HTTP/1, i.e. without prior knowledge.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GRPCRouteSpec",
          "default": {},
          "description": "Spec defines the desired state of GRPCRoute."
        }
      },
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1.Gateway": {
      "additionalProperties": false,
      "description": "Gateway represents an instance of a service-traffic handling infrastructure by binding Listeners to a set of IP addresses.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GatewaySpec",
          "default": {},
          "description": "Spec defines the desired state of Gateway."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1.GatewayClass": {
      "additionalProperties": false,
      "description": "GatewayClass describes a class of Gateways available to the user for creating Gateway resources.\n\nIt is recommended that this resource be used as a template for Gateways. This means that a Gateway is based on the state of the GatewayClass at the time it was created and changes to the GatewayClass or associated parameters are not propagated down to existing Gateways. This recommendation is intended to limit the blast radius of changes to GatewayClass or associated parameters. If implementations choose to propagate GatewayClass changes to existing Gateways, that MUST be clearly documented by the implementation.\n\nWhenever one or more Gateways are using a GatewayClass, implementations SHOULD add the `gateway-exists-finalizer.gateway.networking.k8s.io` finalizer on the associated GatewayClass. This ensures that a GatewayClass associated with a Gateway is not deleted while in use.\n\nGatewayClass is a Cluster level resource.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.GatewayClassSpec",
          "default": {},
          "description": "Spec defines the desired state of GatewayClass."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1.HTTPRoute": {
      "additionalProperties": false,
      "description": "HTTPRoute provides a way to route HTTP requests. This includes the capability to match requests by hostname, path, header, or query param. Filters can be used to specify additional processing steps. Backends specify where matching requests should be routed.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1.HTTPRouteSpec",
          "default": {},
          "description": "Spec defines the desired state of HTTPRoute."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.BackendLBPolicy": {
      "additionalProperties": false,
      "description": "BackendLBPolicy provides a way to define load balancing rules for a backend.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.BackendLBPolicySpec",
          "default": {},
          "description": "Spec defines the desired state of BackendLBPolicy."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.ReferenceGrant": {
      "additionalProperties": false,
      "description": "ReferenceGrant identifies kinds of resources in other namespaces that are trusted to reference the specified kinds of resources in the same namespace as the policy.\n\nEach ReferenceGrant can be used to represent a unique trust relationship. Additional Reference Grants can be used to add to the set of trusted sources of inbound references for the namespace they are defined within.\n\nA ReferenceGrant is required for all cross-namespace references in Gateway API (with the exception of cross-namespace Route-Gateway attachment, which is governed by the AllowedRoutes configuration on the Gateway, and cross-namespace Service ParentRefs on a \"consumer\" mesh Route, which defines routing rules applicable only to workloads in the Route namespace). ReferenceGrants allowing a reference from a Route to a Service are only applicable to BackendRefs.\n\nReferenceGrant is a form of runtime verification allowing users to assert which cross-namespace object references are permitted. Implementations that support ReferenceGrant MUST NOT permit cross-namespace references which have no grant, and MUST respond to the removal of a grant by revoking the access that the grant allowed.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1beta1.ReferenceGrantSpec",
          "default": {},
          "description": "Spec defines the desired state of ReferenceGrant."
        }
      },
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRoute": {
      "additionalProperties": false,
      "description": "TCPRoute provides a way to route TCP requests. When combined with a Gateway listener, it can be used to forward connections on the port specified by the listener to a set of backends specified by the TCPRoute.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRouteSpec",
          "default": {},
          "description": "Spec defines the desired state of TCPRoute."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRoute": {
      "additionalProperties": false,
      "description": "The TLSRoute resource is similar to TCPRoute, but can be configured to match against TLS-specific metadata. This allows more flexibility in matching streams for a given TLS listener.\n\nIf you need to forward traffic to a single target for a TLS listener, you could choose to use a TCPRoute with a TLS listener.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRouteSpec",
          "default": {},
          "description": "Spec defines the desired state of TLSRoute."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRoute": {
      "additionalProperties": false,
      "description": "UDPRoute provides a way to route UDP traffic. When combined with a Gateway listener, it can be used to forward traffic on the port specified by the listener to a set of backends specified by the UDPRoute.",
      "properties": {
        "enabled": {
          "$ref": "#/definitions/metachart.interface.boolean"
        },
        "metadata": {
          "$ref": "#/definitions/metachart.api.meta.v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRouteSpec",
          "default": {},
          "description": "Spec defines the desired state of UDPRoute."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "metachart.api.meta.v1.ObjectMeta": {
      "additionalProperties": false,
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
          "type": "object"
        },
        "checksums": {
          "$ref": "#/definitions/metachart.interface.checksums"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "default": "",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set",
          "x-kubernetes-patch-strategy": "merge"
        },
        "labels": {
          "additionalProperties": {
            "default": "",
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
          "type": "object"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
          "type": "string"
        }
      },
      "type": "object"
    },
    "metachart.interface.FQDNitem": {
      "pattern": "^[a-z][0-9a-z]*(-[0-9a-z]+)*$",
      "type": "string"
    },
    "metachart.interface.boolean": {
      "type": "boolean"
    },
    "metachart.interface.checksumEntryList": {
      "anyOf": [
        {
          "items": {
            "$ref": "#/definitions/metachart.interface.FQDNitem"
          },
          "type": "array"
        },
        {
          "enum": [
            "*"
          ]
        }
      ]
    },
    "metachart.interface.checksums": {
      "properties": {
        "backendlbpolicies": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "gatewayclasses": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "gateways": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "grpcroutes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "httproutes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "referencegrants": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "tcproutes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "tlsroutes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        },
        "udproutes": {
          "$ref": "#/definitions/metachart.interface.checksumEntryList"
        }
      },
      "type": "object"
    }
  },
  "properties": {
    "backendlbpolicies": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.BackendLBPolicy"
        }
      },
      "type": "object"
    },
    "context": {
      "description": "Any content which can be used for config rendering without schema defined by the chart",
      "type": "object"
    },
    "fullnameOverride": {
      "anyOf": [
        {
          "$ref": "#/definitions/metachart.interface.FQDNitem"
        },
        {
          "type": "null"
        }
      ]
    },
    "gatewayclasses": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.GatewayClass"
        }
      },
      "type": "object"
    },
    "gateways": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.Gateway"
        }
      },
      "type": "object"
    },
    "grpcroutes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.GRPCRoute"
        }
      },
      "type": "object"
    },
    "httproutes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.HTTPRoute"
        }
      },
      "type": "object"
    },
    "referencegrants": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.ReferenceGrant"
        }
      },
      "type": "object"
    },
    "settings": {
      "additionalProperties": false,
      "properties": {
        "backendlbpolicies": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.BackendLBPolicy"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gatewayclasses": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.GatewayClass"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "gateways": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.Gateway"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "global": {
          "additionalProperties": false,
          "properties": {
            "annotations": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            },
            "labels": {
              "additionalProperties": {
                "type": "string"
              },
              "type": "object"
            }
          },
          "type": "object"
        },
        "grpcroutes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.GRPCRoute"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "httproutes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1.HTTPRoute"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "referencegrants": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.ReferenceGrant"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "tcproutes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRoute"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "tlsroutes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRoute"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        },
        "udproutes": {
          "properties": {
            "defaults": {
              "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRoute"
            },
            "disabled": {
              "description": "Disable all resources of this kind",
              "type": "boolean"
            }
          },
          "type": "object"
        }
      },
      "type": "object"
    },
    "tcproutes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TCPRoute"
        }
      },
      "type": "object"
    },
    "tlsroutes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.TLSRoute"
        }
      },
      "type": "object"
    },
    "udproutes": {
      "additionalProperties": false,
      "patternProperties": {
        "^[a-z][0-9a-z]*(-[0-9a-z]+)*$": {
          "$ref": "#/definitions/metachart.api.io.k8s.sigs.gateway-api.apis.v1alpha2.UDPRoute"
        }
      },
      "type": "object"
    }
  }
}